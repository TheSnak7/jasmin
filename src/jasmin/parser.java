
//----------------------------------------------------
// The following code was generated by Java(tm) CUP v0.9d
// Sun Feb 05 19:42:27 CET 2006
//----------------------------------------------------

package jasmin;

import java_cup.runtime.*;
import jas.*;
import java.io.*;
import java.util.Hashtable;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {26, 4},     {0, 2},     {57, 11},     {55, 3},     {55, 0}, 
        {56, 1},     {60, 3},     {60, 0},     {61, 0},     {52, 3}, 
        {52, 0},     {39, 3},     {39, 0},     {14, 4},     {14, 4}, 
        {1, 1},     {2, 1},     {2, 1},     {105, 0},     {104, 2}, 
        {12, 1},     {12, 0},     {11, 2},     {11, 1},     {10, 1}, 
        {10, 1},     {10, 1},     {10, 1},     {10, 1},     {10, 1}, 
        {10, 1},     {10, 1},     {10, 1},     {10, 1},     {10, 1}, 
        {10, 1},     {10, 1},     {10, 1},     {10, 1},     {10, 1}, 
        {10, 1},     {43, 3},     {23, 1},     {23, 0},     {24, 2}, 
        {24, 1},     {25, 3},     {74, 1},     {74, 0},     {75, 2}, 
        {75, 1},     {76, 3},     {93, 2},     {77, 2},     {78, 2}, 
        {79, 3},     {79, 3},     {80, 3},     {80, 3},     {80, 4}, 
        {80, 4},     {81, 1},     {81, 0},     {82, 2},     {82, 1}, 
        {83, 3},     {89, 2},     {89, 3},     {84, 2},     {94, 2}, 
        {94, 1},     {86, 2},     {86, 1},     {87, 1},     {8, 1}, 
        {8, 1},     {95, 2},     {95, 1},     {96, 4},     {92, 1}, 
        {85, 3},     {88, 1},     {88, 2},     {97, 2},     {97, 1}, 
        {90, 2},     {90, 1},     {91, 1},     {9, 1},     {9, 1}, 
        {53, 1},     {53, 0},     {58, 2},     {58, 1},     {59, 3}, 
        {54, 4},     {54, 0},     {62, 1},     {62, 0},     {63, 2}, 
        {63, 1},     {64, 3},     {65, 2},     {21, 1},     {21, 0}, 
        {19, 2},     {19, 1},     {20, 8},     {20, 6},     {20, 4}, 
        {6, 2},     {6, 0},     {66, 5},     {67, 3},     {68, 1}, 
        {68, 0},     {69, 2},     {69, 1},     {70, 3},     {70, 3}, 
        {70, 3},     {70, 4},     {7, 1},     {7, 1},     {7, 1}, 
        {71, 1},     {71, 0},     {72, 2},     {72, 1},     {73, 7}, 
        {73, 7},     {3, 1},     {3, 0},     {4, 2},     {4, 0}, 
        {5, 2},     {5, 0},     {36, 1},     {36, 0},     {34, 2}, 
        {34, 1},     {35, 3},     {35, 2},     {16, 4},     {18, 3}, 
        {41, 2},     {41, 1},     {106, 0},     {40, 3},     {42, 1}, 
        {42, 1},     {42, 1},     {42, 1},     {42, 3},     {42, 0}, 
        {98, 2},     {99, 2},     {101, 3},     {101, 3},     {101, 0}, 
        {102, 2},     {102, 0},     {103, 3},     {103, 4},     {103, 4}, 
        {103, 3},     {103, 4},     {103, 4},     {100, 2},     {27, 2}, 
        {27, 3},     {17, 2},     {17, 2},     {17, 2},     {17, 2}, 
        {17, 2},     {17, 2},     {17, 2},     {17, 2},     {17, 2}, 
        {17, 4},     {17, 4},     {51, 10},     {51, 8},     {51, 6}, 
        {51, 4},     {51, 10},     {51, 8},     {28, 2},     {28, 2}, 
        {28, 2},     {46, 1},     {50, 1},     {13, 7},     {13, 7}, 
        {37, 2},     {37, 2},     {37, 2},     {37, 2},     {22, 1}, 
        {22, 1},     {38, 1},     {38, 3},     {38, 2},     {38, 2}, 
        {38, 2},     {38, 3},     {38, 3},     {38, 2},     {38, 2}, 
        {15, 2},     {15, 2},     {29, 3},     {30, 1},     {33, 2}, 
        {33, 1},     {32, 4},     {32, 4},     {31, 3},     {31, 3}, 
        {44, 3},     {45, 2},     {45, 3},     {49, 2},     {49, 1}, 
        {48, 2},     {48, 2},     {47, 3},     {47, 3}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{3,-11,11,-11,15,-11,16,4,-1,0},
    /*1*/{0,-127,5,-127,8,-127,23,135,-1,0},
    /*2*/{0,133,-1,0},
    /*3*/{69,131,-1,0},
    /*4*/{3,-13,11,6,15,-13,-1,0},
    /*5*/{65,14,66,15,-1,0},
    /*6*/{3,9,15,8,-1,0},
    /*7*/{42,-19,43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,65,-19,66,-19,-1,0},
    /*8*/{42,-19,43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,65,-19,66,-19,-1,0},
    /*9*/{10,12,-1,0},
    /*10*/{0,-44,5,-44,8,-44,14,19,17,-44,18,-44,19,-44,21,-44,22,-44,23,-44,24,-44,-1,0},
    /*11*/{65,14,66,15,-1,0},
    /*12*/{28,-16,37,-16,63,-16,-1,0},
    /*13*/{28,-18,30,-18,36,-18,37,-18,62,-18,63,-18,65,-18,66,-18,-1,0},
    /*14*/{28,-17,30,-17,36,-17,37,-17,62,-17,63,-17,65,-17,66,-17,-1,0},
    /*15*/{63,17,-1,0},
    /*16*/{0,-42,5,-42,8,-42,14,-42,17,-42,18,-42,19,-42,21,-42,22,-42,23,-42,24,-42,-1,0},
    /*17*/{0,-46,5,-46,8,-46,14,-46,17,-46,18,-46,19,-46,21,-46,22,-46,23,-46,24,-46,-1,0},
    /*18*/{65,14,66,15,-1,0},
    /*19*/{0,-5,5,-5,8,-5,17,-5,18,-5,19,24,21,-5,22,-5,23,-5,24,-5,-1,0},
    /*20*/{0,-43,5,-43,8,-43,14,19,17,-43,18,-43,19,-43,21,-43,22,-43,23,-43,24,-43,-1,0},
    /*21*/{0,-45,5,-45,8,-45,14,-45,17,-45,18,-45,19,-45,21,-45,22,-45,23,-45,24,-45,-1,0},
    /*22*/{0,-97,5,-97,8,-97,17,-97,18,28,21,-97,22,-97,23,-97,24,-97,-1,0},
    /*23*/{65,25,-1,0},
    /*24*/{63,-6,-1,0},
    /*25*/{63,27,-1,0},
    /*26*/{0,-4,5,-4,8,-4,17,-4,18,-4,21,-4,22,-4,23,-4,24,-4,-1,0},
    /*27*/{29,96,-1,0},
    /*28*/{0,-8,5,-8,8,-8,17,-8,21,-8,22,30,23,-8,24,-8,-1,0},
    /*29*/{63,-9,-1,0},
    /*30*/{0,-49,5,-49,8,-49,17,-49,21,-49,23,-49,24,36,-1,0},
    /*31*/{0,-51,5,-51,8,-51,17,-51,21,-51,23,-51,24,-51,-1,0},
    /*32*/{0,-48,5,-48,8,-48,17,-48,21,-48,23,-48,24,36,-1,0},
    /*33*/{4,-63,65,14,66,15,-1,0},
    /*34*/{0,-99,5,-99,8,-99,17,-99,21,45,23,-99,-1,0},
    /*35*/{38,38,39,37,-1,0},
    /*36*/{65,14,66,15,-1,0},
    /*37*/{65,14,66,15,-1,0},
    /*38*/{4,-55,65,-55,66,-55,-1,0},
    /*39*/{63,41,-1,0},
    /*40*/{4,-56,65,-56,66,-56,-1,0},
    /*41*/{63,43,-1,0},
    /*42*/{4,-57,65,-57,66,-57,-1,0},
    /*43*/{0,-101,5,-101,8,-101,17,-101,21,-101,23,-101,-1,0},
    /*44*/{65,14,66,15,-1,0},
    /*45*/{0,-98,5,-98,8,-98,17,-98,21,45,23,-98,-1,0},
    /*46*/{0,-92,5,-92,8,-92,17,48,23,-92,-1,0},
    /*47*/{65,53,-1,0},
    /*48*/{0,-91,5,-91,8,-91,17,48,23,-91,-1,0},
    /*49*/{0,-94,5,-94,8,-94,17,-94,23,-94,-1,0},
    /*50*/{0,-3,5,-3,8,-3,23,-3,-1,0},
    /*51*/{0,-93,5,-93,8,-93,17,-93,23,-93,-1,0},
    /*52*/{63,54,-1,0},
    /*53*/{0,-95,5,-95,8,-95,17,-95,23,-95,-1,0},
    /*54*/{0,-100,5,-100,8,-100,17,-100,21,-100,23,-100,-1,0},
    /*55*/{65,59,-1,0},
    /*56*/{63,58,-1,0},
    /*57*/{0,-102,5,-102,8,-102,17,-102,21,-102,23,-102,-1,0},
    /*58*/{63,-103,-1,0},
    /*59*/{66,91,-1,0},
    /*60*/{4,-62,65,14,66,15,-1,0},
    /*61*/{62,70,-1,0},
    /*62*/{4,-65,65,-65,66,-65,-1,0},
    /*63*/{4,67,-1,0},
    /*64*/{0,-52,5,-52,8,-52,17,-52,21,-52,23,-52,24,-52,-1,0},
    /*65*/{63,69,-1,0},
    /*66*/{53,68,-1,0},
    /*67*/{63,-54,-1,0},
    /*68*/{0,-53,4,-53,5,-53,8,-53,17,-53,19,-53,21,-53,22,-53,23,-53,24,-53,65,-53,66,-53,-1,0},
    /*69*/{24,77,65,79,66,73,68,76,69,74,-1,0},
    /*70*/{63,88,65,79,66,73,68,76,69,74,-1,0},
    /*71*/{4,-66,65,-66,66,-66,-1,0},
    /*72*/{63,-75,65,-75,66,-75,68,-75,69,-75,-1,0},
    /*73*/{63,-124,65,-124,66,-124,68,-124,69,-124,-1,0},
    /*74*/{4,-78,24,-78,65,-78,66,-78,-1,0},
    /*75*/{63,-123,65,-123,66,-123,68,-123,69,-123,-1,0},
    /*76*/{63,84,-1,0},
    /*77*/{63,-74,65,-74,66,-74,68,-74,69,-74,-1,0},
    /*78*/{63,-125,65,-125,66,-125,68,-125,69,-125,-1,0},
    /*79*/{4,-71,24,77,65,-71,66,-71,-1,0},
    /*80*/{63,-73,65,-73,66,-73,68,-73,69,-73,-1,0},
    /*81*/{63,-76,65,-76,66,-76,68,-76,69,-76,-1,0},
    /*82*/{4,-77,24,-77,65,-77,66,-77,-1,0},
    /*83*/{4,-80,65,-80,66,-80,-1,0},
    /*84*/{4,-63,65,14,66,15,-1,0},
    /*85*/{4,67,-1,0},
    /*86*/{4,-79,24,-79,65,-79,66,-79,-1,0},
    /*87*/{4,-70,65,-70,66,-70,-1,0},
    /*88*/{63,-72,65,-72,66,-72,68,-72,69,-72,-1,0},
    /*89*/{4,-64,65,-64,66,-64,-1,0},
    /*90*/{62,-67,66,92,-1,0},
    /*91*/{62,-68,-1,0},
    /*92*/{0,-50,5,-50,8,-50,17,-50,21,-50,23,-50,24,-50,-1,0},
    /*93*/{63,95,-1,0},
    /*94*/{0,-7,5,-7,8,-7,17,-7,21,-7,23,-7,24,-7,-1,0},
    /*95*/{65,14,66,15,-1,0},
    /*96*/{63,98,-1,0},
    /*97*/{0,-96,5,-96,8,-96,17,-96,21,-96,22,-96,23,-96,24,-96,-1,0},
    /*98*/{63,100,-1,0},
    /*99*/{0,-47,5,-47,8,-47,14,-47,17,-47,18,-47,19,-47,21,-47,22,-47,23,-47,24,-47,-1,0},
    /*100*/{65,14,66,15,-1,0},
    /*101*/{36,-22,37,-22,42,119,43,115,44,117,45,107,46,105,47,113,48,109,49,111,50,120,51,114,52,110,53,108,54,116,55,106,56,118,57,112,58,104,63,-22,65,-22,66,-22,-1,0},
    /*102*/{42,119,43,115,44,117,45,107,46,105,47,113,48,109,49,111,50,120,51,114,52,110,53,108,54,116,55,106,56,118,57,112,58,104,65,-21,66,-21,-1,0},
    /*103*/{42,-41,43,-41,44,-41,45,-41,46,-41,47,-41,48,-41,49,-41,50,-41,51,-41,52,-41,53,-41,54,-41,55,-41,56,-41,57,-41,58,-41,65,-41,66,-41,-1,0},
    /*104*/{42,-26,43,-26,44,-26,45,-26,46,-26,47,-26,48,-26,49,-26,50,-26,51,-26,52,-26,53,-26,54,-26,55,-26,56,-26,57,-26,58,-26,65,-26,66,-26,-1,0},
    /*105*/{42,-38,43,-38,44,-38,45,-38,46,-38,47,-38,48,-38,49,-38,50,-38,51,-38,52,-38,53,-38,54,-38,55,-38,56,-38,57,-38,58,-38,65,-38,66,-38,-1,0},
    /*106*/{42,-33,43,-33,44,-33,45,-33,46,-33,47,-33,48,-33,49,-33,50,-33,51,-33,52,-33,53,-33,54,-33,55,-33,56,-33,57,-33,58,-33,65,-33,66,-33,-1,0},
    /*107*/{42,-36,43,-36,44,-36,45,-36,46,-36,47,-36,48,-36,49,-36,50,-36,51,-36,52,-36,53,-36,54,-36,55,-36,56,-36,57,-36,58,-36,65,-36,66,-36,-1,0},
    /*108*/{42,-25,43,-25,44,-25,45,-25,46,-25,47,-25,48,-25,49,-25,50,-25,51,-25,52,-25,53,-25,54,-25,55,-25,56,-25,57,-25,58,-25,65,-25,66,-25,-1,0},
    /*109*/{42,-31,43,-31,44,-31,45,-31,46,-31,47,-31,48,-31,49,-31,50,-31,51,-31,52,-31,53,-31,54,-31,55,-31,56,-31,57,-31,58,-31,65,-31,66,-31,-1,0},
    /*110*/{42,-28,43,-28,44,-28,45,-28,46,-28,47,-28,48,-28,49,-28,50,-28,51,-28,52,-28,53,-28,54,-28,55,-28,56,-28,57,-28,58,-28,65,-28,66,-28,-1,0},
    /*111*/{42,-40,43,-40,44,-40,45,-40,46,-40,47,-40,48,-40,49,-40,50,-40,51,-40,52,-40,53,-40,54,-40,55,-40,56,-40,57,-40,58,-40,65,-40,66,-40,-1,0},
    /*112*/{42,-27,43,-27,44,-27,45,-27,46,-27,47,-27,48,-27,49,-27,50,-27,51,-27,52,-27,53,-27,54,-27,55,-27,56,-27,57,-27,58,-27,65,-27,66,-27,-1,0},
    /*113*/{42,-32,43,-32,44,-32,45,-32,46,-32,47,-32,48,-32,49,-32,50,-32,51,-32,52,-32,53,-32,54,-32,55,-32,56,-32,57,-32,58,-32,65,-32,66,-32,-1,0},
    /*114*/{42,-29,43,-29,44,-29,45,-29,46,-29,47,-29,48,-29,49,-29,50,-29,51,-29,52,-29,53,-29,54,-29,55,-29,56,-29,57,-29,58,-29,65,-29,66,-29,-1,0},
    /*115*/{42,-37,43,-37,44,-37,45,-37,46,-37,47,-37,48,-37,49,-37,50,-37,51,-37,52,-37,53,-37,54,-37,55,-37,56,-37,57,-37,58,-37,65,-37,66,-37,-1,0},
    /*116*/{42,-34,43,-34,44,-34,45,-34,46,-34,47,-34,48,-34,49,-34,50,-34,51,-34,52,-34,53,-34,54,-34,55,-34,56,-34,57,-34,58,-34,65,-34,66,-34,-1,0},
    /*117*/{42,-39,43,-39,44,-39,45,-39,46,-39,47,-39,48,-39,49,-39,50,-39,51,-39,52,-39,53,-39,54,-39,55,-39,56,-39,57,-39,58,-39,65,-39,66,-39,-1,0},
    /*118*/{42,-35,43,-35,44,-35,45,-35,46,-35,47,-35,48,-35,49,-35,50,-35,51,-35,52,-35,53,-35,54,-35,55,-35,56,-35,57,-35,58,-35,65,-35,66,-35,-1,0},
    /*119*/{42,-30,43,-30,44,-30,45,-30,46,-30,47,-30,48,-30,49,-30,50,-30,51,-30,52,-30,53,-30,54,-30,55,-30,56,-30,57,-30,58,-30,65,-30,66,-30,-1,0},
    /*120*/{36,-20,37,-20,63,-20,65,-20,66,-20,-1,0},
    /*121*/{42,-24,43,-24,44,-24,45,-24,46,-24,47,-24,48,-24,49,-24,50,-24,51,-24,52,-24,53,-24,54,-24,55,-24,56,-24,57,-24,58,-24,65,-24,66,-24,-1,0},
    /*122*/{42,-23,43,-23,44,-23,45,-23,46,-23,47,-23,48,-23,49,-23,50,-23,51,-23,52,-23,53,-23,54,-23,55,-23,56,-23,57,-23,58,-23,65,-23,66,-23,-1,0},
    /*123*/{63,125,-1,0},
    /*124*/{10,-14,-1,0},
    /*125*/{65,14,66,15,-1,0},
    /*126*/{63,128,-1,0},
    /*127*/{10,-15,-1,0},
    /*128*/{63,130,-1,0},
    /*129*/{3,-12,15,-12,-1,0},
    /*130*/{63,132,-1,0},
    /*131*/{3,-10,11,-10,15,-10,-1,0},
    /*132*/{0,-2,-1,0},
    /*133*/{0,-129,5,-129,8,-129,23,-129,-1,0},
    /*134*/{35,383,44,382,-1,0},
    /*135*/{0,-105,5,141,8,-105,-1,0},
    /*136*/{0,-126,5,-126,8,-126,23,135,-1,0},
    /*137*/{0,-128,5,-128,8,-128,23,-128,-1,0},
    /*138*/{0,-139,8,178,-1,0},
    /*139*/{0,-107,5,-107,8,-107,-1,0},
    /*140*/{42,-19,43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,65,-19,66,-19,-1,0},
    /*141*/{0,-104,5,141,8,-104,-1,0},
    /*142*/{0,-106,5,-106,8,-106,-1,0},
    /*143*/{65,14,66,15,-1,0},
    /*144*/{4,-116,19,151,21,147,22,146,24,152,-1,0},
    /*145*/{63,-9,-1,0},
    /*146*/{65,14,66,15,-1,0},
    /*147*/{4,-115,19,151,21,147,22,146,24,152,-1,0},
    /*148*/{4,-118,19,-118,21,-118,22,-118,24,-118,-1,0},
    /*149*/{4,158,-1,0},
    /*150*/{65,25,-1,0},
    /*151*/{38,38,39,37,-1,0},
    /*152*/{4,-63,65,14,66,15,-1,0},
    /*153*/{4,67,-1,0},
    /*154*/{4,-122,19,-122,21,-122,22,-122,24,-122,-1,0},
    /*155*/{63,157,-1,0},
    /*156*/{4,-119,19,-119,21,-119,22,-119,24,-119,-1,0},
    /*157*/{34,160,-1,0},
    /*158*/{0,-110,5,-110,8,-110,-1,0},
    /*159*/{63,161,-1,0},
    /*160*/{0,-114,5,-114,8,-114,-1,0},
    /*161*/{4,-117,19,-117,21,-117,22,-117,24,-117,-1,0},
    /*162*/{63,164,-1,0},
    /*163*/{4,-120,19,-120,21,-120,22,-120,24,-120,-1,0},
    /*164*/{63,166,-1,0},
    /*165*/{4,-121,19,-121,21,-121,22,-121,24,-121,-1,0},
    /*166*/{65,14,66,15,-1,0},
    /*167*/{30,171,62,169,63,-112,-1,0},
    /*168*/{65,79,68,76,69,74,-1,0},
    /*169*/{63,175,-1,0},
    /*170*/{65,172,-1,0},
    /*171*/{62,169,63,-112,-1,0},
    /*172*/{63,174,-1,0},
    /*173*/{0,-108,5,-108,8,-108,-1,0},
    /*174*/{0,-109,4,-113,5,-109,8,-109,19,-113,21,-113,22,-113,24,-113,-1,0},
    /*175*/{63,-111,-1,0},
    /*176*/{0,-1,-1,0},
    /*177*/{42,-19,43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,65,-19,66,-19,-1,0},
    /*178*/{0,-141,8,-141,-1,0},
    /*179*/{1,-148,2,-148,4,185,6,-148,7,-148,9,-148,12,-148,13,-148,19,-148,20,-148,21,-148,22,-148,24,-148,59,-148,60,-148,63,-148,66,-148,67,-148,68,-148,-1,0},
    /*180*/{0,-138,8,178,-1,0},
    /*181*/{0,-140,8,-140,-1,0},
    /*182*/{1,-148,2,-148,4,185,6,-148,7,-148,9,-148,12,-148,13,-148,19,-148,20,-148,21,-148,22,-148,24,-148,59,-148,60,-148,63,-148,66,-148,67,-148,68,-148,-1,0},
    /*183*/{1,206,2,198,6,193,7,207,9,208,12,213,13,192,19,194,20,203,21,190,22,212,24,195,59,204,60,202,63,-155,66,191,67,201,68,196,-1,0},
    /*184*/{29,188,-1,0},
    /*185*/{1,-147,2,-147,4,-147,6,-147,7,-147,9,-147,12,-147,13,-147,19,-147,20,-147,21,-147,22,-147,24,-147,59,-147,60,-147,63,-147,66,-147,67,-147,68,-147,-1,0},
    /*186*/{0,-143,8,-143,-1,0},
    /*187*/{63,189,-1,0},
    /*188*/{0,-145,8,-145,-1,0},
    /*189*/{65,14,66,15,-1,0},
    /*190*/{64,375,-1,0},
    /*191*/{68,355,-1,0},
    /*192*/{31,348,33,350,66,349,-1,0},
    /*193*/{65,25,-1,0},
    /*194*/{38,314,39,312,40,317,41,316,61,311,-1,0},
    /*195*/{64,309,-1,0},
    /*196*/{63,-153,-1,0},
    /*197*/{65,14,66,15,-1,0},
    /*198*/{63,-151,-1,0},
    /*199*/{63,295,-1,0},
    /*200*/{63,-202,65,287,66,288,68,290,69,291,70,289,-1,0},
    /*201*/{68,271,-1,0},
    /*202*/{63,268,-1,0},
    /*203*/{63,251,-1,0},
    /*204*/{4,-160,31,-160,32,226,33,-160,-1,0},
    /*205*/{63,-152,-1,0},
    /*206*/{68,224,-1,0},
    /*207*/{66,218,-1,0},
    /*208*/{63,-200,-1,0},
    /*209*/{63,-150,-1,0},
    /*210*/{63,-201,-1,0},
    /*211*/{63,-9,-1,0},
    /*212*/{65,14,66,15,-1,0},
    /*213*/{63,-193,-1,0},
    /*214*/{63,-175,-1,0},
    /*215*/{63,-180,-1,0},
    /*216*/{63,-177,-1,0},
    /*217*/{65,219,66,220,68,221,69,222,-1,0},
    /*218*/{63,-199,-1,0},
    /*219*/{63,-197,-1,0},
    /*220*/{63,-196,-1,0},
    /*221*/{63,-198,-1,0},
    /*222*/{63,-174,-1,0},
    /*223*/{63,-192,-1,0},
    /*224*/{4,248,-1,0},
    /*225*/{66,244,68,245,-1,0},
    /*226*/{4,-162,31,-162,33,-162,-1,0},
    /*227*/{4,-157,31,229,33,231,-1,0},
    /*228*/{66,238,-1,0},
    /*229*/{4,-161,31,-161,33,-161,-1,0},
    /*230*/{66,232,-1,0},
    /*231*/{63,233,65,14,66,15,68,235,-1,0},
    /*232*/{4,-163,31,-163,33,-163,-1,0},
    /*233*/{63,237,-1,0},
    /*234*/{63,236,-1,0},
    /*235*/{4,-165,31,-165,33,-165,-1,0},
    /*236*/{4,-164,31,-164,33,-164,-1,0},
    /*237*/{63,239,65,14,66,15,68,241,-1,0},
    /*238*/{4,-166,31,-166,33,-166,-1,0},
    /*239*/{63,243,-1,0},
    /*240*/{63,242,-1,0},
    /*241*/{4,-168,31,-168,33,-168,-1,0},
    /*242*/{4,-167,31,-167,33,-167,-1,0},
    /*243*/{63,247,-1,0},
    /*244*/{63,246,-1,0},
    /*245*/{4,-158,31,-158,33,-158,-1,0},
    /*246*/{4,-159,31,-159,33,-159,-1,0},
    /*247*/{31,250,-1,0},
    /*248*/{63,-154,-1,0},
    /*249*/{63,-169,-1,0},
    /*250*/{68,-214,-1,0},
    /*251*/{68,256,-1,0},
    /*252*/{63,-211,-1,0},
    /*253*/{61,-216,68,-216,-1,0},
    /*254*/{61,263,68,256,-1,0},
    /*255*/{64,257,-1,0},
    /*256*/{66,258,68,259,-1,0},
    /*257*/{63,261,-1,0},
    /*258*/{63,260,-1,0},
    /*259*/{61,-218,68,-218,-1,0},
    /*260*/{61,-217,68,-217,-1,0},
    /*261*/{63,-213,-1,0},
    /*262*/{64,265,-1,0},
    /*263*/{61,-215,68,-215,-1,0},
    /*264*/{66,266,68,267,-1,0},
    /*265*/{63,-219,-1,0},
    /*266*/{63,-220,-1,0},
    /*267*/{4,-156,31,-156,32,-156,33,-156,-1,0},
    /*268*/{66,276,68,278,-1,0},
    /*269*/{63,-212,-1,0},
    /*270*/{63,272,68,273,-1,0},
    /*271*/{66,-222,68,-222,-1,0},
    /*272*/{63,274,-1,0},
    /*273*/{66,-223,68,-223,-1,0},
    /*274*/{61,281,66,276,68,278,-1,0},
    /*275*/{63,280,-1,0},
    /*276*/{61,-225,66,-225,68,-225,-1,0},
    /*277*/{63,279,-1,0},
    /*278*/{61,-227,66,-227,68,-227,-1,0},
    /*279*/{61,-226,66,-226,68,-226,-1,0},
    /*280*/{64,284,-1,0},
    /*281*/{61,-224,66,-224,68,-224,-1,0},
    /*282*/{63,-221,-1,0},
    /*283*/{66,285,68,286,-1,0},
    /*284*/{63,-228,-1,0},
    /*285*/{63,-229,-1,0},
    /*286*/{63,-209,-1,0},
    /*287*/{63,-206,66,293,68,294,-1,0},
    /*288*/{63,-210,-1,0},
    /*289*/{63,-204,68,292,-1,0},
    /*290*/{63,-205,-1,0},
    /*291*/{63,-203,-1,0},
    /*292*/{63,-208,-1,0},
    /*293*/{63,-207,-1,0},
    /*294*/{1,-149,2,-149,4,-149,6,-149,7,-149,9,-149,12,-149,13,-149,19,-149,20,-149,21,-149,22,-149,24,-149,59,-149,60,-149,63,-149,66,-149,67,-149,68,-149,-1,0},
    /*295*/{63,-176,-1,0},
    /*296*/{28,298,-1,0},
    /*297*/{66,299,68,300,-1,0},
    /*298*/{25,305,-1,0},
    /*299*/{25,301,-1,0},
    /*300*/{68,302,-1,0},
    /*301*/{26,303,-1,0},
    /*302*/{68,304,-1,0},
    /*303*/{63,-195,-1,0},
    /*304*/{66,306,-1,0},
    /*305*/{26,307,-1,0},
    /*306*/{66,308,-1,0},
    /*307*/{63,-194,-1,0},
    /*308*/{59,204,60,202,67,201,-1,0},
    /*309*/{63,-171,-1,0},
    /*310*/{63,345,-1,0},
    /*311*/{65,14,66,15,-1,0},
    /*312*/{4,-63,65,14,66,15,-1,0},
    /*313*/{65,14,66,15,-1,0},
    /*314*/{66,324,-1,0},
    /*315*/{68,321,-1,0},
    /*316*/{68,318,-1,0},
    /*317*/{65,14,66,15,-1,0},
    /*318*/{63,320,-1,0},
    /*319*/{4,-60,65,-60,66,-60,-1,0},
    /*320*/{65,14,66,15,-1,0},
    /*321*/{63,323,-1,0},
    /*322*/{4,-61,65,-61,66,-61,-1,0},
    /*323*/{62,-82,66,338,-1,0},
    /*324*/{4,67,-1,0},
    /*325*/{62,327,-1,0},
    /*326*/{24,77,65,79,66,329,68,76,69,74,-1,0},
    /*327*/{4,-81,-1,0},
    /*328*/{63,-89,65,-89,66,-89,68,-89,69,-89,-1,0},
    /*329*/{63,335,65,79,66,329,68,76,69,74,-1,0},
    /*330*/{4,-85,24,77,-1,0},
    /*331*/{63,-87,65,-87,66,-87,68,-87,69,-87,-1,0},
    /*332*/{63,-88,65,-88,66,-88,68,-88,69,-88,-1,0},
    /*333*/{63,-90,65,-90,66,-90,68,-90,69,-90,-1,0},
    /*334*/{4,-84,-1,0},
    /*335*/{63,-86,65,-86,66,-86,68,-86,69,-86,-1,0},
    /*336*/{63,-182,-1,0},
    /*337*/{62,-83,-1,0},
    /*338*/{63,340,-1,0},
    /*339*/{4,-58,65,-58,66,-58,-1,0},
    /*340*/{4,67,-1,0},
    /*341*/{63,-181,-1,0},
    /*342*/{63,344,-1,0},
    /*343*/{4,-59,65,-59,66,-59,-1,0},
    /*344*/{66,-69,-1,0},
    /*345*/{63,-178,-1,0},
    /*346*/{63,-173,-1,0},
    /*347*/{68,353,-1,0},
    /*348*/{68,352,-1,0},
    /*349*/{68,351,-1,0},
    /*350*/{63,-189,-1,0},
    /*351*/{63,-191,-1,0},
    /*352*/{63,-190,-1,0},
    /*353*/{63,-172,-1,0},
    /*354*/{27,356,-1,0},
    /*355*/{65,14,66,15,-1,0},
    /*356*/{65,14,66,15,-1,0},
    /*357*/{28,359,30,360,63,-186,-1,0},
    /*358*/{66,369,68,370,-1,0},
    /*359*/{65,361,-1,0},
    /*360*/{28,362,63,-185,-1,0},
    /*361*/{66,363,68,364,-1,0},
    /*362*/{25,367,-1,0},
    /*363*/{25,365,-1,0},
    /*364*/{68,366,-1,0},
    /*365*/{63,-187,-1,0},
    /*366*/{66,368,-1,0},
    /*367*/{63,-183,-1,0},
    /*368*/{25,373,-1,0},
    /*369*/{25,371,-1,0},
    /*370*/{68,372,-1,0},
    /*371*/{63,-188,-1,0},
    /*372*/{66,374,-1,0},
    /*373*/{63,-184,-1,0},
    /*374*/{63,-170,-1,0},
    /*375*/{63,-179,-1,0},
    /*376*/{1,-146,2,-146,4,-146,6,-146,7,-146,9,-146,12,-146,13,-146,19,-146,20,-146,21,-146,22,-146,24,-146,59,-146,60,-146,63,-146,66,-146,67,-146,68,-146,-1,0},
    /*377*/{0,-142,8,-142,-1,0},
    /*378*/{65,14,66,15,-1,0},
    /*379*/{63,381,-1,0},
    /*380*/{1,-144,2,-144,4,-144,6,-144,7,-144,9,-144,12,-144,13,-144,19,-144,20,-144,21,-144,22,-144,24,-144,59,-144,60,-144,63,-144,66,-144,67,-144,68,-144,-1,0},
    /*381*/{36,-19,37,-19,42,-19,43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,63,-19,65,-19,66,-19,-1,0},
    /*382*/{36,-19,37,-19,42,-19,43,-19,44,-19,45,-19,46,-19,47,-19,48,-19,49,-19,50,-19,51,-19,52,-19,53,-19,54,-19,55,-19,56,-19,57,-19,58,-19,63,-19,65,-19,66,-19,-1,0},
    /*383*/{36,-133,37,-133,63,-133,65,14,66,15,-1,0},
    /*384*/{36,387,37,-135,63,-135,-1,0},
    /*385*/{36,-132,37,-132,63,-132,-1,0},
    /*386*/{65,14,66,15,-1,0},
    /*387*/{37,389,63,-137,-1,0},
    /*388*/{65,14,66,15,-1,0},
    /*389*/{63,391,-1,0},
    /*390*/{0,-130,5,-130,8,-130,23,-130,-1,0},
    /*391*/{63,-136,-1,0},
    /*392*/{37,-134,63,-134,-1,0},
    /*393*/{36,-133,37,-133,63,-133,65,14,66,15,-1,0},
    /*394*/{36,387,37,-135,63,-135,-1,0},
    /*395*/{37,389,63,-137,-1,0},
    /*396*/{63,398,-1,0},
    /*397*/{0,-131,5,-131,8,-131,23,-131,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{26,2,52,4,57,1,-1,-1},
    /*1*/{71,135,72,136,73,133,-1,-1},
    /*2*/{-1,-1},
    /*3*/{-1,-1},
    /*4*/{39,6,-1,-1},
    /*5*/{2,128,-1,-1},
    /*6*/{14,9,-1,-1},
    /*7*/{104,125,105,101,-1,-1},
    /*8*/{104,100,105,101,-1,-1},
    /*9*/{43,10,-1,-1},
    /*10*/{23,19,24,20,25,17,-1,-1},
    /*11*/{1,15,2,12,-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{1,98,2,12,-1,-1},
    /*19*/{55,22,-1,-1},
    /*20*/{25,21,-1,-1},
    /*21*/{-1,-1},
    /*22*/{54,28,-1,-1},
    /*23*/{56,25,-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{60,30,-1,-1},
    /*29*/{61,93,-1,-1},
    /*30*/{74,34,75,32,76,31,78,33,-1,-1},
    /*31*/{-1,-1},
    /*32*/{76,92,78,33,-1,-1},
    /*33*/{2,59,81,63,82,60,83,62,89,61,-1,-1},
    /*34*/{62,46,63,45,64,43,-1,-1},
    /*35*/{79,38,-1,-1},
    /*36*/{1,41,2,12,-1,-1},
    /*37*/{1,39,2,12,-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{2,55,65,56,-1,-1},
    /*45*/{64,54,-1,-1},
    /*46*/{53,50,58,48,59,49,-1,-1},
    /*47*/{-1,-1},
    /*48*/{59,51,-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{2,59,83,89,89,61,-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{77,65,93,64,-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{7,81,8,77,86,70,87,80,94,71,95,79,96,74,-1,-1},
    /*70*/{7,81,8,77,87,88,-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{92,84,-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{96,82,-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{2,59,81,85,82,60,83,62,89,61,-1,-1},
    /*85*/{77,65,93,86,-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{2,96,-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{1,123,2,12,-1,-1},
    /*101*/{10,121,11,102,12,120,-1,-1},
    /*102*/{10,122,-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{-1,-1},
    /*125*/{1,126,2,12,-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{19,141,20,139,21,138,-1,-1},
    /*136*/{73,137,-1,-1},
    /*137*/{-1,-1},
    /*138*/{16,179,34,180,35,178,36,176,-1,-1},
    /*139*/{-1,-1},
    /*140*/{66,144,104,143,105,101,-1,-1},
    /*141*/{20,142,-1,-1},
    /*142*/{-1,-1},
    /*143*/{2,166,-1,-1},
    /*144*/{68,149,69,147,70,148,-1,-1},
    /*145*/{61,164,-1,-1},
    /*146*/{2,55,65,162,-1,-1},
    /*147*/{70,161,-1,-1},
    /*148*/{-1,-1},
    /*149*/{67,158,-1,-1},
    /*150*/{56,155,-1,-1},
    /*151*/{79,152,-1,-1},
    /*152*/{2,59,81,153,82,60,83,62,89,61,-1,-1},
    /*153*/{77,65,93,154,-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{-1,-1},
    /*166*/{2,167,-1,-1},
    /*167*/{6,169,-1,-1},
    /*168*/{7,175,-1,-1},
    /*169*/{-1,-1},
    /*170*/{-1,-1},
    /*171*/{6,172,-1,-1},
    /*172*/{-1,-1},
    /*173*/{-1,-1},
    /*174*/{-1,-1},
    /*175*/{-1,-1},
    /*176*/{-1,-1},
    /*177*/{104,378,105,101,-1,-1},
    /*178*/{-1,-1},
    /*179*/{18,186,40,185,41,182,106,183,-1,-1},
    /*180*/{16,179,35,181,-1,-1},
    /*181*/{-1,-1},
    /*182*/{18,377,40,376,106,183,-1,-1},
    /*183*/{15,210,17,198,22,209,27,196,38,208,42,199,98,204,-1,-1},
    /*184*/{-1,-1},
    /*185*/{-1,-1},
    /*186*/{-1,-1},
    /*187*/{-1,-1},
    /*188*/{-1,-1},
    /*189*/{2,55,65,375,-1,-1},
    /*190*/{-1,-1},
    /*191*/{51,353,-1,-1},
    /*192*/{28,346,-1,-1},
    /*193*/{56,345,-1,-1},
    /*194*/{80,312,84,314,-1,-1},
    /*195*/{-1,-1},
    /*196*/{-1,-1},
    /*197*/{1,296,2,12,13,295,-1,-1},
    /*198*/{-1,-1},
    /*199*/{-1,-1},
    /*200*/{-1,-1},
    /*201*/{44,269,45,268,-1,-1},
    /*202*/{-1,-1},
    /*203*/{29,252,30,251,-1,-1},
    /*204*/{99,224,101,226,-1,-1},
    /*205*/{-1,-1},
    /*206*/{46,222,-1,-1},
    /*207*/{37,216,-1,-1},
    /*208*/{-1,-1},
    /*209*/{-1,-1},
    /*210*/{-1,-1},
    /*211*/{61,215,-1,-1},
    /*212*/{1,213,2,12,50,214,-1,-1},
    /*213*/{-1,-1},
    /*214*/{-1,-1},
    /*215*/{-1,-1},
    /*216*/{-1,-1},
    /*217*/{-1,-1},
    /*218*/{-1,-1},
    /*219*/{-1,-1},
    /*220*/{-1,-1},
    /*221*/{-1,-1},
    /*222*/{-1,-1},
    /*223*/{-1,-1},
    /*224*/{100,248,-1,-1},
    /*225*/{-1,-1},
    /*226*/{102,227,-1,-1},
    /*227*/{103,229,-1,-1},
    /*228*/{-1,-1},
    /*229*/{-1,-1},
    /*230*/{-1,-1},
    /*231*/{2,233,-1,-1},
    /*232*/{-1,-1},
    /*233*/{-1,-1},
    /*234*/{-1,-1},
    /*235*/{-1,-1},
    /*236*/{-1,-1},
    /*237*/{2,239,-1,-1},
    /*238*/{-1,-1},
    /*239*/{-1,-1},
    /*240*/{-1,-1},
    /*241*/{-1,-1},
    /*242*/{-1,-1},
    /*243*/{-1,-1},
    /*244*/{-1,-1},
    /*245*/{-1,-1},
    /*246*/{-1,-1},
    /*247*/{-1,-1},
    /*248*/{-1,-1},
    /*249*/{-1,-1},
    /*250*/{-1,-1},
    /*251*/{32,253,33,254,-1,-1},
    /*252*/{-1,-1},
    /*253*/{-1,-1},
    /*254*/{31,261,32,263,-1,-1},
    /*255*/{-1,-1},
    /*256*/{-1,-1},
    /*257*/{-1,-1},
    /*258*/{-1,-1},
    /*259*/{-1,-1},
    /*260*/{-1,-1},
    /*261*/{-1,-1},
    /*262*/{-1,-1},
    /*263*/{-1,-1},
    /*264*/{-1,-1},
    /*265*/{-1,-1},
    /*266*/{-1,-1},
    /*267*/{-1,-1},
    /*268*/{48,276,49,274,-1,-1},
    /*269*/{-1,-1},
    /*270*/{-1,-1},
    /*271*/{-1,-1},
    /*272*/{-1,-1},
    /*273*/{-1,-1},
    /*274*/{47,282,48,281,-1,-1},
    /*275*/{-1,-1},
    /*276*/{-1,-1},
    /*277*/{-1,-1},
    /*278*/{-1,-1},
    /*279*/{-1,-1},
    /*280*/{-1,-1},
    /*281*/{-1,-1},
    /*282*/{-1,-1},
    /*283*/{-1,-1},
    /*284*/{-1,-1},
    /*285*/{-1,-1},
    /*286*/{-1,-1},
    /*287*/{-1,-1},
    /*288*/{-1,-1},
    /*289*/{-1,-1},
    /*290*/{-1,-1},
    /*291*/{-1,-1},
    /*292*/{-1,-1},
    /*293*/{-1,-1},
    /*294*/{-1,-1},
    /*295*/{-1,-1},
    /*296*/{-1,-1},
    /*297*/{-1,-1},
    /*298*/{-1,-1},
    /*299*/{-1,-1},
    /*300*/{-1,-1},
    /*301*/{-1,-1},
    /*302*/{-1,-1},
    /*303*/{-1,-1},
    /*304*/{-1,-1},
    /*305*/{-1,-1},
    /*306*/{-1,-1},
    /*307*/{-1,-1},
    /*308*/{15,210,22,309,38,208,-1,-1},
    /*309*/{-1,-1},
    /*310*/{-1,-1},
    /*311*/{1,342,2,12,-1,-1},
    /*312*/{2,59,81,340,82,60,83,62,89,61,-1,-1},
    /*313*/{1,338,2,12,-1,-1},
    /*314*/{85,324,88,325,-1,-1},
    /*315*/{-1,-1},
    /*316*/{-1,-1},
    /*317*/{1,318,2,12,-1,-1},
    /*318*/{-1,-1},
    /*319*/{-1,-1},
    /*320*/{1,321,2,12,-1,-1},
    /*321*/{-1,-1},
    /*322*/{-1,-1},
    /*323*/{-1,-1},
    /*324*/{77,336,-1,-1},
    /*325*/{-1,-1},
    /*326*/{7,333,9,332,90,329,91,331,95,330,96,74,97,327,-1,-1},
    /*327*/{-1,-1},
    /*328*/{-1,-1},
    /*329*/{7,333,9,332,91,335,-1,-1},
    /*330*/{96,82,-1,-1},
    /*331*/{-1,-1},
    /*332*/{-1,-1},
    /*333*/{-1,-1},
    /*334*/{-1,-1},
    /*335*/{-1,-1},
    /*336*/{-1,-1},
    /*337*/{-1,-1},
    /*338*/{-1,-1},
    /*339*/{-1,-1},
    /*340*/{77,341,-1,-1},
    /*341*/{-1,-1},
    /*342*/{-1,-1},
    /*343*/{-1,-1},
    /*344*/{-1,-1},
    /*345*/{-1,-1},
    /*346*/{-1,-1},
    /*347*/{-1,-1},
    /*348*/{-1,-1},
    /*349*/{-1,-1},
    /*350*/{-1,-1},
    /*351*/{-1,-1},
    /*352*/{-1,-1},
    /*353*/{-1,-1},
    /*354*/{-1,-1},
    /*355*/{2,356,-1,-1},
    /*356*/{2,357,-1,-1},
    /*357*/{-1,-1},
    /*358*/{-1,-1},
    /*359*/{-1,-1},
    /*360*/{-1,-1},
    /*361*/{-1,-1},
    /*362*/{-1,-1},
    /*363*/{-1,-1},
    /*364*/{-1,-1},
    /*365*/{-1,-1},
    /*366*/{-1,-1},
    /*367*/{-1,-1},
    /*368*/{-1,-1},
    /*369*/{-1,-1},
    /*370*/{-1,-1},
    /*371*/{-1,-1},
    /*372*/{-1,-1},
    /*373*/{-1,-1},
    /*374*/{-1,-1},
    /*375*/{-1,-1},
    /*376*/{-1,-1},
    /*377*/{-1,-1},
    /*378*/{2,379,-1,-1},
    /*379*/{-1,-1},
    /*380*/{-1,-1},
    /*381*/{104,393,105,101,-1,-1},
    /*382*/{104,383,105,101,-1,-1},
    /*383*/{2,385,3,384,-1,-1},
    /*384*/{4,387,-1,-1},
    /*385*/{-1,-1},
    /*386*/{1,392,2,12,-1,-1},
    /*387*/{5,389,-1,-1},
    /*388*/{1,391,2,12,-1,-1},
    /*389*/{-1,-1},
    /*390*/{-1,-1},
    /*391*/{-1,-1},
    /*392*/{-1,-1},
    /*393*/{2,385,3,394,-1,-1},
    /*394*/{4,395,-1,-1},
    /*395*/{5,396,-1,-1},
    /*396*/{-1,-1},
    /*397*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 1;}

  /** EOF symbol index */
  public int EOF_sym() {return 0;}

  /** error symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {

	action_obj.scanner = scanner;
	action_obj.classFile = classFile;

    }

  /** scan to get the next token */
  public java_cup.runtime.token scan()
    throws java.lang.Exception
    {

    return scanner.next_token();

    }



	// parser code

	public Scanner scanner;
	public ClassFile classFile;

	public void report_error(String message, Object info) {
    	    classFile.report_error("Warning - " + message);
	}

	public void report_fatal_error(String message, Object info)  {
    	    classFile.report_error("Error - " + message);
    	    // System.exit(-1);
	}

	parser(ClassFile classFile, Scanner scanner) {
		super();

	    this.scanner = scanner;
	    this.classFile = classFile;
	}

};

/** JavaCup generated class to encapsulate user supplied action code.*/
class CUP$actions {


    short access_val;
	public ClassFile classFile;
    public Scanner scanner;


  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* object for return from actions */
      java_cup.runtime.symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // table_default ::= DEFAULT COLON Int 
            {
              CUP$result = new symbol(/*table_default*/47);
              
            classFile.endTableswitch((/*off*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // table_default ::= DEFAULT COLON Word 
            {
              CUP$result = new symbol(/*table_default*/47);
              
            classFile.endTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // table_entry ::= Int SEP 
            {
              CUP$result = new symbol(/*table_entry*/48);
              
            classFile.addTableswitch((/*off*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // table_entry ::= Word SEP 
            {
              CUP$result = new symbol(/*table_entry*/48);
              
            classFile.addTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // table_list ::= table_entry 
            {
              CUP$result = new symbol(/*table_list*/49);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // table_list ::= table_list table_entry 
            {
              CUP$result = new symbol(/*table_list*/49);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // table_args ::= Int Int SEP 
            {
              CUP$result = new symbol(/*table_args*/45);
              
            classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*high*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // table_args ::= Int SEP 
            {
              CUP$result = new symbol(/*table_args*/45);
              
            classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // table ::= table_args table_list table_default 
            {
              CUP$result = new symbol(/*table*/44);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // lookup_default ::= DEFAULT COLON Int 
            {
              CUP$result = new symbol(/*lookup_default*/31);
               classFile.endLookupswitch((/*off*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // lookup_default ::= DEFAULT COLON Word 
            {
              CUP$result = new symbol(/*lookup_default*/31);
               classFile.endLookupswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // lookup_entry ::= Int COLON Int SEP 
            {
              CUP$result = new symbol(/*lookup_entry*/32);
              
            classFile.addLookupswitch((/*i*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val, (/*off*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // lookup_entry ::= Int COLON Word SEP 
            {
              CUP$result = new symbol(/*lookup_entry*/32);
              
            classFile.addLookupswitch((/*i*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val, (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // lookup_list ::= lookup_entry 
            {
              CUP$result = new symbol(/*lookup_list*/33);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // lookup_list ::= lookup_list lookup_entry 
            {
              CUP$result = new symbol(/*lookup_list*/33);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // lookup_args ::= SEP 
            {
              CUP$result = new symbol(/*lookup_args*/30);
               classFile.newLookupswitch(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // lookup ::= lookup_args lookup_list lookup_default 
            {
              CUP$result = new symbol(/*lookup*/29);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // complex_instruction ::= TABLESWITCH table 
            {
              CUP$result = new symbol(/*complex_instruction*/15);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // complex_instruction ::= LOOKUPSWITCH lookup 
            {
              CUP$result = new symbol(/*complex_instruction*/15);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // simple_instruction ::= Insn Relative 
            {
              CUP$result = new symbol(/*simple_instruction*/38);
              
            classFile.plantRelativeGoto((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(relative_num_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // simple_instruction ::= Insn Str 
            {
              CUP$result = new symbol(/*simple_instruction*/38);
              
            classFile.plantString((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // simple_instruction ::= Insn Word Word 
            {
              CUP$result = new symbol(/*simple_instruction*/38);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // simple_instruction ::= Insn Word Int 
            {
              CUP$result = new symbol(/*simple_instruction*/38);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // simple_instruction ::= Insn Word 
            {
              CUP$result = new symbol(/*simple_instruction*/38);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // simple_instruction ::= Insn Num 
            {
              CUP$result = new symbol(/*simple_instruction*/38);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // simple_instruction ::= Insn Int 
            {
              CUP$result = new symbol(/*simple_instruction*/38);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // simple_instruction ::= Insn Int Int 
            {
              CUP$result = new symbol(/*simple_instruction*/38);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // simple_instruction ::= Insn 
            {
              CUP$result = new symbol(/*simple_instruction*/38);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // instruction ::= complex_instruction 
            {
              CUP$result = new symbol(/*instruction*/22);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // instruction ::= simple_instruction 
            {
              CUP$result = new symbol(/*instruction*/22);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // set_expr ::= Word Str 
            {
              CUP$result = new symbol(/*set_expr*/37);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(str_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // set_expr ::= Word Num 
            {
              CUP$result = new symbol(/*set_expr*/37);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(num_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // set_expr ::= Word Word 
            {
              CUP$result = new symbol(/*set_expr*/37);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(str_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // set_expr ::= Word Int 
            {
              CUP$result = new symbol(/*set_expr*/37);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(int_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // catch_expr ::= classname FROM Int TO Int USING Int 
            {
              CUP$result = new symbol(/*catch_expr*/13);
              
            classFile.addCatch((/*aclass*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                               (/*fromoff*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val,
                               (/*tooff*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val,
                               (/*branchoff*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // catch_expr ::= classname FROM Word TO Word USING Word 
            {
              CUP$result = new symbol(/*catch_expr*/13);
              
            classFile.addCatch((/*aclass*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                               (/*fromlab*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val,
                               (/*tolab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                               (/*branchlab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // throws_expr ::= classname 
            {
              CUP$result = new symbol(/*throws_expr*/50);
              
            classFile.addThrow((/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // line_expr ::= Int 
            {
              CUP$result = new symbol(/*line_expr*/46);
               classFile.addLine((/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // limit_expr ::= Word Int 
            {
              CUP$result = new symbol(/*limit_expr*/28);
              
         classFile.report_error(".limit expected \"stack\" or \"locals\", but got "
                      + (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
      
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // limit_expr ::= STACK Int 
            {
              CUP$result = new symbol(/*limit_expr*/28);
              
         classFile.setStackSize((short)(/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
      
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // limit_expr ::= LOCALS Int 
            {
              CUP$result = new symbol(/*limit_expr*/28);
              
        classFile.setVarSize((short)(/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
      
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // var_expr ::= Int IS uname uname FROM Int TO Int 
            {
              CUP$result = new symbol(/*var_expr*/51);
              
             classFile.addVar((/*soff*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*eoff*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val,
                            (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, null, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-7)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // var_expr ::= Int IS uname uname SIGNATURE Str FROM Int TO Int 
            {
              CUP$result = new symbol(/*var_expr*/51);
              
             classFile.addVar((/*soff*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*eoff*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-7)).str_val,
                            (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val, (/*sign*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-9)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // var_expr ::= Int IS uname uname 
            {
              CUP$result = new symbol(/*var_expr*/51);
              
             classFile.addVar(null, null, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, null,
             		      (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // var_expr ::= Int IS uname uname SIGNATURE Str 
            {
              CUP$result = new symbol(/*var_expr*/51);
              
             classFile.addVar(null, null, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
             		      (/*sign*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val,  (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-5)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // var_expr ::= Int IS uname uname FROM Word TO Word 
            {
              CUP$result = new symbol(/*var_expr*/51);
              
             classFile.addVar((/*slab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*elab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val,
                            (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, null, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-7)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // var_expr ::= Int IS uname uname SIGNATURE Str FROM Word TO Word 
            {
              CUP$result = new symbol(/*var_expr*/51);
              
             classFile.addVar((/*slab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*elab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-7)).str_val,
                            (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val, (/*sign*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-9)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // directive ::= DANNOTATION ann_def_spec ann_def_val endannotation 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // directive ::= DANNOTATION ann_met_expr ann_arglist endannotation 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // directive ::= DDEPRECATED deprecated_expr 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // directive ::= DATTRIBUTE generic_expr 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // directive ::= DSIGNATURE signature_expr 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // directive ::= DSET set_expr 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // directive ::= DCATCH catch_expr 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // directive ::= DTHROWS throws_expr 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // directive ::= DLINE line_expr 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // directive ::= DLIMIT limit_expr 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // directive ::= DVAR var_expr 
            {
              CUP$result = new symbol(/*directive*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // label ::= Int COLON instruction 
            {
              CUP$result = new symbol(/*label*/27);
              
            classFile.plantLabel(String.valueOf((/*label*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // label ::= Word COLON 
            {
              CUP$result = new symbol(/*label*/27);
              
            classFile.plantLabel((/*label*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // endstack ::= DEND STACK 
            {
              CUP$result = new symbol(/*endstack*/100);
               classFile.endStack(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // stack_item ::= STACK Word Int SEP 
            {
              CUP$result = new symbol(/*stack_item*/103);
               classFile.plantStackStack((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, String.valueOf((/*n*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // stack_item ::= STACK Word uname SEP 
            {
              CUP$result = new symbol(/*stack_item*/103);
               classFile.plantStackStack((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*val*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // stack_item ::= STACK Word SEP 
            {
              CUP$result = new symbol(/*stack_item*/103);
               classFile.plantStackStack((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, null); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // stack_item ::= LOCALS Word Int SEP 
            {
              CUP$result = new symbol(/*stack_item*/103);
               classFile.plantStackLocals((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, String.valueOf((/*n*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // stack_item ::= LOCALS Word uname SEP 
            {
              CUP$result = new symbol(/*stack_item*/103);
               classFile.plantStackLocals((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*val*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // stack_item ::= LOCALS Word SEP 
            {
              CUP$result = new symbol(/*stack_item*/103);
               classFile.plantStackLocals((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, null); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // stack_items ::= 
            {
              CUP$result = new symbol(/*stack_items*/102);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // stack_items ::= stack_items stack_item 
            {
              CUP$result = new symbol(/*stack_items*/102);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // stack_offset_def ::= 
            {
              CUP$result = new symbol(/*stack_offset_def*/101);
               classFile.plantStackOffset(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // stack_offset_def ::= OFFSET Word SEP 
            {
              CUP$result = new symbol(/*stack_offset_def*/101);
               classFile.plantStackOffset((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // stack_offset_def ::= OFFSET Int SEP 
            {
              CUP$result = new symbol(/*stack_offset_def*/101);
               classFile.plantStackOffset((/*n*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // stack_map_frame_desc ::= stack_offset_def stack_items 
            {
              CUP$result = new symbol(/*stack_map_frame_desc*/99);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // defstack ::= DSTACK SEP 
            {
              CUP$result = new symbol(/*defstack*/98);
               classFile.beginStack(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // stmnt ::= 
            {
              CUP$result = new symbol(/*stmnt*/42);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // stmnt ::= defstack stack_map_frame_desc endstack 
            {
              CUP$result = new symbol(/*stmnt*/42);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // stmnt ::= label 
            {
              CUP$result = new symbol(/*stmnt*/42);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // stmnt ::= error 
            {
              CUP$result = new symbol(/*stmnt*/42);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // stmnt ::= directive 
            {
              CUP$result = new symbol(/*stmnt*/42);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // stmnt ::= instruction 
            {
              CUP$result = new symbol(/*stmnt*/42);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement ::= NT$1 stmnt SEP 
            {
              CUP$result = new symbol(/*statement*/40);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$1 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$1*/106);
               classFile.setLine(scanner.token_line_num); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statements ::= statement 
            {
              CUP$result = new symbol(/*statements*/41);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // statements ::= statements statement 
            {
              CUP$result = new symbol(/*statements*/41);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // endmethod ::= DEND METHOD SEP 
            {
              CUP$result = new symbol(/*endmethod*/18);
              
            classFile.endMethod();
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // defmethod ::= DMETHOD access uname SEP 
            {
              CUP$result = new symbol(/*defmethod*/16);
              
            String split[] = ScannerUtils.splitMethodSignature((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            classFile.newMethod(split[0], split[1], (/*i*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // method_spec ::= defmethod endmethod 
            {
              CUP$result = new symbol(/*method_spec*/35);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // method_spec ::= defmethod statements endmethod 
            {
              CUP$result = new symbol(/*method_spec*/35);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // method_list ::= method_spec 
            {
              CUP$result = new symbol(/*method_list*/34);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // method_list ::= method_list method_spec 
            {
              CUP$result = new symbol(/*method_list*/34);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // methods ::= 
            {
              CUP$result = new symbol(/*methods*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // methods ::= method_list 
            {
              CUP$result = new symbol(/*methods*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // inner_outer ::= 
            {
              CUP$result = new str_token(/*inner_outer*/5);
               ((str_token)CUP$result).str_val = null; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // inner_outer ::= OUTER classname 
            {
              CUP$result = new str_token(/*inner_outer*/5);
               ((str_token)CUP$result).str_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // inner_inner ::= 
            {
              CUP$result = new str_token(/*inner_inner*/4);
               ((str_token)CUP$result).str_val = null; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // inner_inner ::= INNER classname 
            {
              CUP$result = new str_token(/*inner_inner*/4);
               ((str_token)CUP$result).str_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // inner_name ::= 
            {
              CUP$result = new str_token(/*inner_name*/3);
               ((str_token)CUP$result).str_val = null; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // inner_name ::= uname 
            {
              CUP$result = new str_token(/*inner_name*/3);
               ((str_token)CUP$result).str_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // inner_spec ::= DINNER INTERFACE access inner_name inner_inner inner_outer SEP 
            {
              CUP$result = new symbol(/*inner_spec*/73);
               classFile.addInner((short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val | RuntimeConstants.ACC_INTERFACE),
                          (/*n*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*o*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // inner_spec ::= DINNER CLASS access inner_name inner_inner inner_outer SEP 
            {
              CUP$result = new symbol(/*inner_spec*/73);
               classFile.addInner((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val,
                          (/*n*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*o*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // inner_list ::= inner_spec 
            {
              CUP$result = new symbol(/*inner_list*/72);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // inner_list ::= inner_list inner_spec 
            {
              CUP$result = new symbol(/*inner_list*/72);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // inners ::= 
            {
              CUP$result = new symbol(/*inners*/71);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // inners ::= inner_list 
            {
              CUP$result = new symbol(/*inners*/71);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // item ::= Str 
            {
              CUP$result = new var_token(/*item*/7);
               ((var_token)CUP$result).var_val = (/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // item ::= Num 
            {
              CUP$result = new var_token(/*item*/7);
               ((var_token)CUP$result).var_val = (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // item ::= Int 
            {
              CUP$result = new var_token(/*item*/7);
               ((var_token)CUP$result).var_val = new Integer((/*i*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // field_ext_expr ::= DANNOTATION ann_clf_expr ann_arglist endannotationsep 
            {
              CUP$result = new symbol(/*field_ext_expr*/70);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // field_ext_expr ::= DDEPRECATED deprecated_expr SEP 
            {
              CUP$result = new symbol(/*field_ext_expr*/70);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // field_ext_expr ::= DATTRIBUTE generic_expr SEP 
            {
              CUP$result = new symbol(/*field_ext_expr*/70);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // field_ext_expr ::= DSIGNATURE signature_expr SEP 
            {
              CUP$result = new symbol(/*field_ext_expr*/70);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // field_ext_list ::= field_ext_expr 
            {
              CUP$result = new symbol(/*field_ext_list*/69);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // field_ext_list ::= field_ext_list field_ext_expr 
            {
              CUP$result = new symbol(/*field_ext_list*/69);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // field_exts ::= 
            {
              CUP$result = new symbol(/*field_exts*/68);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // field_exts ::= field_ext_list 
            {
              CUP$result = new symbol(/*field_exts*/68);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // endfield ::= DEND FIELD SEP 
            {
              CUP$result = new symbol(/*endfield*/67);
               classFile.endField(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // field_start ::= access uname uname optional_default SEP 
            {
              CUP$result = new symbol(/*field_start*/66);
              
            classFile.beginField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val,
                                 (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
      
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // optional_default ::= 
            {
              CUP$result = new var_token(/*optional_default*/6);
               ((var_token)CUP$result).var_val = null; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // optional_default ::= EQ item 
            {
              CUP$result = new var_token(/*optional_default*/6);
               ((var_token)CUP$result).var_val = (/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // field_spec ::= DFIELD field_start field_exts endfield 
            {
              CUP$result = new symbol(/*field_spec*/20);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // field_spec ::= DFIELD access uname uname optional_default SEP 
            {
              CUP$result = new symbol(/*field_spec*/20);
              
            classFile.addField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                               null, (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // field_spec ::= DFIELD access uname uname SIGNATURE Str optional_default SEP 
            {
              CUP$result = new symbol(/*field_spec*/20);
              
            classFile.addField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-6)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val, (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val,
                               (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // field_list ::= field_spec 
            {
              CUP$result = new symbol(/*field_list*/19);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // field_list ::= field_list field_spec 
            {
              CUP$result = new symbol(/*field_list*/19);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // fields ::= 
            {
              CUP$result = new symbol(/*fields*/21);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // fields ::= field_list 
            {
              CUP$result = new symbol(/*fields*/21);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // generic_expr ::= uname Str 
            {
              CUP$result = new symbol(/*generic_expr*/65);
               classFile.addGenericAttr((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*file*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // generic_spec ::= DATTRIBUTE generic_expr SEP 
            {
              CUP$result = new symbol(/*generic_spec*/64);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // generic_list ::= generic_spec 
            {
              CUP$result = new symbol(/*generic_list*/63);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // generic_list ::= generic_list generic_spec 
            {
              CUP$result = new symbol(/*generic_list*/63);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // generic_attributes ::= 
            {
              CUP$result = new symbol(/*generic_attributes*/62);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // generic_attributes ::= generic_list 
            {
              CUP$result = new symbol(/*generic_attributes*/62);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // enclosing_spec ::= 
            {
              CUP$result = new symbol(/*enclosing_spec*/54);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // enclosing_spec ::= DENCLOSING METHOD uname SEP 
            {
              CUP$result = new symbol(/*enclosing_spec*/54);
              
            classFile.setEnclosingMethod((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // debug_spec ::= DDEBUG Str SEP 
            {
              CUP$result = new symbol(/*debug_spec*/59);
               classFile.setSourceDebugExtension((/*s*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // debug_list ::= debug_spec 
            {
              CUP$result = new symbol(/*debug_list*/58);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // debug_list ::= debug_list debug_spec 
            {
              CUP$result = new symbol(/*debug_list*/58);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // debug_extension ::= 
            {
              CUP$result = new symbol(/*debug_extension*/53);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // debug_extension ::= debug_list 
            {
              CUP$result = new symbol(/*debug_extension*/53);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ann_defitem ::= item 
            {
              CUP$result = new var_token(/*ann_defitem*/9);
               ((var_token)CUP$result).var_val = (/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ann_defitem ::= Word 
            {
              CUP$result = new var_token(/*ann_defitem*/9);
               ((var_token)CUP$result).var_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ann_defval ::= ann_defitem 
            {
              CUP$result = new symbol(/*ann_defval*/91);
               classFile.addAnnotationValue((/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ann_def_items ::= ann_defval 
            {
              CUP$result = new symbol(/*ann_def_items*/90);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ann_def_items ::= ann_def_items ann_defval 
            {
              CUP$result = new symbol(/*ann_def_items*/90);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ann_defval_list ::= ann_ann_list 
            {
              CUP$result = new symbol(/*ann_defval_list*/97);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ann_defval_list ::= ann_def_items SEP 
            {
              CUP$result = new symbol(/*ann_defval_list*/97);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ann_def_expr ::= Word Word 
            {
              CUP$result = new symbol(/*ann_def_expr*/88);
               classFile.addAnnotationField(null, (/*dsc*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*sub*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ann_def_expr ::= Word 
            {
              CUP$result = new symbol(/*ann_def_expr*/88);
               classFile.addAnnotationField(null, (/*dsc*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, null); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ann_def_val ::= ann_def_expr EQ ann_defval_list 
            {
              CUP$result = new symbol(/*ann_def_val*/85);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ann_nest ::= SEP 
            {
              CUP$result = new symbol(/*ann_nest*/92);
               classFile.nestAnnotation(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ann_ann_value ::= DANNOTATION ann_nest ann_arglist endannotationsep 
            {
              CUP$result = new symbol(/*ann_ann_value*/96);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ann_ann_list ::= ann_ann_value 
            {
              CUP$result = new symbol(/*ann_ann_list*/95);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ann_ann_list ::= ann_ann_list ann_ann_value 
            {
              CUP$result = new symbol(/*ann_ann_list*/95);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ann_item ::= item 
            {
              CUP$result = new var_token(/*ann_item*/8);
               ((var_token)CUP$result).var_val = (/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ann_item ::= Word 
            {
              CUP$result = new var_token(/*ann_item*/8);
               ((var_token)CUP$result).var_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ann_value ::= ann_item 
            {
              CUP$result = new symbol(/*ann_value*/87);
               classFile.addAnnotationValue((/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ann_value_items ::= ann_value 
            {
              CUP$result = new symbol(/*ann_value_items*/86);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ann_value_items ::= ann_value_items ann_value 
            {
              CUP$result = new symbol(/*ann_value_items*/86);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ann_value_list ::= ann_ann_list 
            {
              CUP$result = new symbol(/*ann_value_list*/94);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ann_value_list ::= ann_value_items SEP 
            {
              CUP$result = new symbol(/*ann_value_list*/94);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ann_def_spec ::= DEFAULT SEP 
            {
              CUP$result = new symbol(/*ann_def_spec*/84);
               classFile.addAnnotation(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ann_arg_expr ::= uname Word Word 
            {
              CUP$result = new symbol(/*ann_arg_expr*/89);
               classFile.addAnnotationField((/*n*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*dsc*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*sub*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ann_arg_expr ::= uname Word 
            {
              CUP$result = new symbol(/*ann_arg_expr*/89);
               classFile.addAnnotationField((/*n*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*dsc*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, null); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ann_arg_spec ::= ann_arg_expr EQ ann_value_list 
            {
              CUP$result = new symbol(/*ann_arg_spec*/83);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ann_arg_list ::= ann_arg_spec 
            {
              CUP$result = new symbol(/*ann_arg_list*/82);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ann_arg_list ::= ann_arg_list ann_arg_spec 
            {
              CUP$result = new symbol(/*ann_arg_list*/82);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ann_arglist ::= 
            {
              CUP$result = new symbol(/*ann_arglist*/81);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ann_arglist ::= ann_arg_list 
            {
              CUP$result = new symbol(/*ann_arglist*/81);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ann_met_expr ::= INVISIBLEPARAM Int classname SEP 
            {
              CUP$result = new symbol(/*ann_met_expr*/80);
               classFile.addAnnotation(false, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ann_met_expr ::= VISIBLEPARAM Int classname SEP 
            {
              CUP$result = new symbol(/*ann_met_expr*/80);
               classFile.addAnnotation(true, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ann_met_expr ::= INVISIBLE classname SEP 
            {
              CUP$result = new symbol(/*ann_met_expr*/80);
               classFile.addAnnotation(false, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ann_met_expr ::= VISIBLE classname SEP 
            {
              CUP$result = new symbol(/*ann_met_expr*/80);
               classFile.addAnnotation(true, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ann_clf_expr ::= INVISIBLE classname SEP 
            {
              CUP$result = new symbol(/*ann_clf_expr*/79);
               classFile.addAnnotation(false, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ann_clf_expr ::= VISIBLE classname SEP 
            {
              CUP$result = new symbol(/*ann_clf_expr*/79);
               classFile.addAnnotation(true, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ann_cls_expr ::= DANNOTATION ann_clf_expr 
            {
              CUP$result = new symbol(/*ann_cls_expr*/78);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // endannotation ::= DEND ANNOTATION 
            {
              CUP$result = new symbol(/*endannotation*/77);
               classFile.endAnnotation(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // endannotationsep ::= endannotation SEP 
            {
              CUP$result = new symbol(/*endannotationsep*/93);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ann_cls_spec ::= ann_cls_expr ann_arglist endannotationsep 
            {
              CUP$result = new symbol(/*ann_cls_spec*/76);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ann_cls_list ::= ann_cls_spec 
            {
              CUP$result = new symbol(/*ann_cls_list*/75);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ann_cls_list ::= ann_cls_list ann_cls_spec 
            {
              CUP$result = new symbol(/*ann_cls_list*/75);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // annotations ::= 
            {
              CUP$result = new symbol(/*annotations*/74);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // annotations ::= ann_cls_list 
            {
              CUP$result = new symbol(/*annotations*/74);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // implements_spec ::= DIMPLEMENTS classname SEP 
            {
              CUP$result = new symbol(/*implements_spec*/25);
               classFile.addInterface((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // implements_list ::= implements_spec 
            {
              CUP$result = new symbol(/*implements_list*/24);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // implements_list ::= implements_list implements_spec 
            {
              CUP$result = new symbol(/*implements_list*/24);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // implements ::= 
            {
              CUP$result = new symbol(/*implements*/23);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // implements ::= implements_list 
            {
              CUP$result = new symbol(/*implements*/23);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // super_spec ::= DSUPER classname SEP 
            {
              CUP$result = new symbol(/*super_spec*/43);
              
            classFile.setSuperClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // access_item ::= SYNTHETIC 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_SYNTHETIC; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // access_item ::= STRICT 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_STRICT; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // access_item ::= VARARGS 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_VARARGS; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // access_item ::= BRIDGE 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_BRIDGE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // access_item ::= ENUM 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_ENUM; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // access_item ::= ANNOTATION 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_ANNOTATION; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // access_item ::= ABSTRACT 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_ABSTRACT; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // access_item ::= INTERFACE 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_INTERFACE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // access_item ::= NATIVE 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_NATIVE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // access_item ::= TRANSIENT 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_TRANSIENT; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // access_item ::= VOLATILE 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_VOLATILE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // access_item ::= SYNCHRONIZED 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_SYNCHRONIZED; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // access_item ::= FINAL 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_FINAL; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // access_item ::= STATIC 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_STATIC; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // access_item ::= PROTECTED 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_PROTECTED; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // access_item ::= PRIVATE 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_PRIVATE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // access_item ::= PUBLIC 
            {
              CUP$result = new symbol(/*access_item*/10);
               access_val |= RuntimeConstants.ACC_PUBLIC; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // access_items ::= access_item 
            {
              CUP$result = new symbol(/*access_items*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // access_items ::= access_items access_item 
            {
              CUP$result = new symbol(/*access_items*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // access_list ::= 
            {
              CUP$result = new symbol(/*access_list*/12);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // access_list ::= access_items 
            {
              CUP$result = new symbol(/*access_list*/12);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // access ::= NT$0 access_list 
            {
              CUP$result = new int_token(/*access*/104);
               ((int_token)CUP$result).int_val = access_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$0*/105);
               access_val = 0; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // uname ::= Str 
            {
              CUP$result = new str_token(/*uname*/2);
               ((str_token)CUP$result).str_val = (/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // uname ::= Word 
            {
              CUP$result = new str_token(/*uname*/2);
               ((str_token)CUP$result).str_val = (/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classname ::= uname 
            {
              CUP$result = new str_token(/*classname*/1);
               ((str_token)CUP$result).str_val = ScannerUtils.convertDots((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_spec ::= DINTERFACE access classname SEP 
            {
              CUP$result = new symbol(/*class_spec*/14);
              
            classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val |
                        RuntimeConstants.ACC_SUPER |
                        RuntimeConstants.ACC_INTERFACE));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_spec ::= DCLASS access classname SEP 
            {
              CUP$result = new symbol(/*class_spec*/14);
              
            classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val | RuntimeConstants.ACC_SUPER));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // source_spec ::= 
            {
              CUP$result = new symbol(/*source_spec*/39);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // source_spec ::= DSOURCE uname SEP 
            {
              CUP$result = new symbol(/*source_spec*/39);
               classFile.setSource((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bytecode_spec ::= 
            {
              CUP$result = new symbol(/*bytecode_spec*/52);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bytecode_spec ::= DBYTECODE Num SEP 
            {
              CUP$result = new symbol(/*bytecode_spec*/52);
               classFile.setVersion((/*n*/(num_token)CUP$stack.elementAt(CUP$top-1)).num_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // deprecated_expr ::= 
            {
              CUP$result = new symbol(/*deprecated_expr*/61);
               classFile.setDeprecated(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // deprecated_spec ::= 
            {
              CUP$result = new symbol(/*deprecated_spec*/60);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // deprecated_spec ::= DDEPRECATED deprecated_expr SEP 
            {
              CUP$result = new symbol(/*deprecated_spec*/60);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // signature_expr ::= Str 
            {
              CUP$result = new symbol(/*signature_expr*/56);
               classFile.setSignature((/*sig*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // signature_spec ::= 
            {
              CUP$result = new symbol(/*signature_spec*/55);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // signature_spec ::= DSIGNATURE signature_expr SEP 
            {
              CUP$result = new symbol(/*signature_spec*/55);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // jasmin_header ::= bytecode_spec source_spec class_spec super_spec implements signature_spec enclosing_spec deprecated_spec annotations generic_attributes debug_extension 
            {
              CUP$result = new symbol(/*jasmin_header*/57);
               classFile.endHeader(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= jas_file EOF 
            {
              CUP$result = new java_cup.runtime.token(/*$START*/0);
              
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // jas_file ::= jasmin_header inners fields methods 
            {
              CUP$result = new symbol(/*jas_file*/26);
              
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
};

