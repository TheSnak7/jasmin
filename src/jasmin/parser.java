
//----------------------------------------------------
// The following code was generated by Java(tm) CUP v0.9d
// Fri Dec 02 14:52:27 CET 2005
//----------------------------------------------------

package jasmin;

import java_cup.runtime.*;
import jas.*;
import java.io.*;
import java.util.Hashtable;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {20, 3},     {0, 2},     {51, 8},     {49, 3},     {49, 0}, 
        {46, 3},     {46, 0},     {33, 3},     {33, 0},     {8, 4}, 
        {8, 4},     {1, 1},     {60, 0},     {59, 2},     {6, 1}, 
        {6, 0},     {5, 2},     {5, 1},     {4, 1},     {4, 1}, 
        {4, 1},     {4, 1},     {4, 1},     {4, 1},     {4, 1}, 
        {4, 1},     {4, 1},     {4, 1},     {4, 1},     {4, 1}, 
        {4, 1},     {4, 1},     {4, 1},     {37, 3},     {17, 1}, 
        {17, 0},     {18, 2},     {18, 1},     {19, 3},     {47, 3}, 
        {47, 0},     {48, 4},     {48, 4},     {48, 0},     {15, 1}, 
        {15, 0},     {13, 2},     {13, 1},     {14, 8},     {14, 6}, 
        {2, 2},     {2, 0},     {3, 1},     {3, 1},     {3, 1}, 
        {30, 1},     {30, 0},     {28, 2},     {28, 1},     {29, 3}, 
        {29, 2},     {10, 4},     {12, 3},     {35, 2},     {35, 1}, 
        {61, 0},     {34, 3},     {36, 1},     {36, 1},     {36, 1}, 
        {36, 1},     {36, 3},     {36, 0},     {52, 2},     {53, 2}, 
        {55, 3},     {56, 2},     {56, 0},     {57, 3},     {57, 4}, 
        {57, 4},     {57, 3},     {57, 4},     {57, 4},     {54, 2}, 
        {21, 2},     {21, 3},     {11, 2},     {11, 2},     {11, 2}, 
        {11, 2},     {11, 2},     {11, 2},     {11, 2},     {45, 8}, 
        {45, 4},     {45, 8},     {22, 2},     {22, 2},     {22, 2}, 
        {40, 1},     {44, 1},     {7, 7},     {7, 7},     {31, 2}, 
        {31, 2},     {31, 2},     {31, 2},     {50, 1},     {16, 1}, 
        {16, 1},     {32, 1},     {32, 3},     {32, 2},     {32, 2}, 
        {32, 2},     {32, 3},     {32, 3},     {32, 2},     {32, 2}, 
        {9, 2},     {9, 2},     {23, 3},     {24, 1},     {27, 2}, 
        {27, 1},     {26, 4},     {26, 4},     {25, 3},     {25, 3}, 
        {38, 3},     {39, 2},     {39, 3},     {43, 2},     {43, 1}, 
        {42, 2},     {42, 2},     {41, 3},     {41, 3}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{3,-7,11,-7,15,-7,16,4,-1,0},
    /*1*/{0,-46,5,71,8,-46,-1,0},
    /*2*/{0,68,-1,0},
    /*3*/{55,66,-1,0},
    /*4*/{3,-9,11,6,15,-9,-1,0},
    /*5*/{52,64,-1,0},
    /*6*/{3,9,15,8,-1,0},
    /*7*/{30,-13,31,-13,32,-13,33,-13,34,-13,35,-13,36,-13,37,-13,38,-13,39,-13,40,-13,41,-13,42,-13,43,-13,44,-13,52,-13,-1,0},
    /*8*/{30,-13,31,-13,32,-13,33,-13,34,-13,35,-13,36,-13,37,-13,38,-13,39,-13,40,-13,41,-13,42,-13,43,-13,44,-13,52,-13,-1,0},
    /*9*/{10,12,-1,0},
    /*10*/{0,-36,5,-36,8,-36,14,17,17,-36,18,-36,19,-36,-1,0},
    /*11*/{52,13,-1,0},
    /*12*/{24,-12,49,-12,-1,0},
    /*13*/{49,15,-1,0},
    /*14*/{0,-34,5,-34,8,-34,14,-34,17,-34,18,-34,19,-34,-1,0},
    /*15*/{0,-38,5,-38,8,-38,14,-38,17,-38,18,-38,19,-38,-1,0},
    /*16*/{52,13,-1,0},
    /*17*/{0,-5,5,-5,8,-5,17,-5,18,-5,19,22,-1,0},
    /*18*/{0,-35,5,-35,8,-35,14,17,17,-35,18,-35,19,-35,-1,0},
    /*19*/{0,-37,5,-37,8,-37,14,-37,17,-37,18,-37,19,-37,-1,0},
    /*20*/{0,-41,5,-41,8,-41,17,25,18,-41,-1,0},
    /*21*/{51,23,-1,0},
    /*22*/{49,24,-1,0},
    /*23*/{0,-4,5,-4,8,-4,17,-4,18,-4,-1,0},
    /*24*/{51,34,-1,0},
    /*25*/{0,-44,5,-44,8,-44,18,27,-1,0},
    /*26*/{25,29,-1,0},
    /*27*/{0,-3,5,-3,8,-3,-1,0},
    /*28*/{51,31,52,30,-1,0},
    /*29*/{49,33,-1,0},
    /*30*/{49,32,-1,0},
    /*31*/{0,-43,5,-43,8,-43,-1,0},
    /*32*/{0,-42,5,-42,8,-42,-1,0},
    /*33*/{49,35,-1,0},
    /*34*/{0,-40,5,-40,8,-40,18,-40,-1,0},
    /*35*/{49,37,-1,0},
    /*36*/{0,-39,5,-39,8,-39,14,-39,17,-39,18,-39,19,-39,-1,0},
    /*37*/{52,13,-1,0},
    /*38*/{30,54,31,50,32,52,33,43,34,41,35,48,36,45,37,47,38,55,39,49,40,46,41,44,42,51,43,42,44,53,52,-16,-1,0},
    /*39*/{30,54,31,50,32,52,33,43,34,41,35,48,36,45,37,47,38,55,39,49,40,46,41,44,42,51,43,42,44,53,52,-15,-1,0},
    /*40*/{30,-20,31,-20,32,-20,33,-20,34,-20,35,-20,36,-20,37,-20,38,-20,39,-20,40,-20,41,-20,42,-20,43,-20,44,-20,52,-20,-1,0},
    /*41*/{30,-32,31,-32,32,-32,33,-32,34,-32,35,-32,36,-32,37,-32,38,-32,39,-32,40,-32,41,-32,42,-32,43,-32,44,-32,52,-32,-1,0},
    /*42*/{30,-27,31,-27,32,-27,33,-27,34,-27,35,-27,36,-27,37,-27,38,-27,39,-27,40,-27,41,-27,42,-27,43,-27,44,-27,52,-27,-1,0},
    /*43*/{30,-30,31,-30,32,-30,33,-30,34,-30,35,-30,36,-30,37,-30,38,-30,39,-30,40,-30,41,-30,42,-30,43,-30,44,-30,52,-30,-1,0},
    /*44*/{30,-19,31,-19,32,-19,33,-19,34,-19,35,-19,36,-19,37,-19,38,-19,39,-19,40,-19,41,-19,42,-19,43,-19,44,-19,52,-19,-1,0},
    /*45*/{30,-25,31,-25,32,-25,33,-25,34,-25,35,-25,36,-25,37,-25,38,-25,39,-25,40,-25,41,-25,42,-25,43,-25,44,-25,52,-25,-1,0},
    /*46*/{30,-22,31,-22,32,-22,33,-22,34,-22,35,-22,36,-22,37,-22,38,-22,39,-22,40,-22,41,-22,42,-22,43,-22,44,-22,52,-22,-1,0},
    /*47*/{30,-21,31,-21,32,-21,33,-21,34,-21,35,-21,36,-21,37,-21,38,-21,39,-21,40,-21,41,-21,42,-21,43,-21,44,-21,52,-21,-1,0},
    /*48*/{30,-26,31,-26,32,-26,33,-26,34,-26,35,-26,36,-26,37,-26,38,-26,39,-26,40,-26,41,-26,42,-26,43,-26,44,-26,52,-26,-1,0},
    /*49*/{30,-23,31,-23,32,-23,33,-23,34,-23,35,-23,36,-23,37,-23,38,-23,39,-23,40,-23,41,-23,42,-23,43,-23,44,-23,52,-23,-1,0},
    /*50*/{30,-31,31,-31,32,-31,33,-31,34,-31,35,-31,36,-31,37,-31,38,-31,39,-31,40,-31,41,-31,42,-31,43,-31,44,-31,52,-31,-1,0},
    /*51*/{30,-28,31,-28,32,-28,33,-28,34,-28,35,-28,36,-28,37,-28,38,-28,39,-28,40,-28,41,-28,42,-28,43,-28,44,-28,52,-28,-1,0},
    /*52*/{30,-33,31,-33,32,-33,33,-33,34,-33,35,-33,36,-33,37,-33,38,-33,39,-33,40,-33,41,-33,42,-33,43,-33,44,-33,52,-33,-1,0},
    /*53*/{30,-29,31,-29,32,-29,33,-29,34,-29,35,-29,36,-29,37,-29,38,-29,39,-29,40,-29,41,-29,42,-29,43,-29,44,-29,52,-29,-1,0},
    /*54*/{30,-24,31,-24,32,-24,33,-24,34,-24,35,-24,36,-24,37,-24,38,-24,39,-24,40,-24,41,-24,42,-24,43,-24,44,-24,52,-24,-1,0},
    /*55*/{52,-14,-1,0},
    /*56*/{30,-18,31,-18,32,-18,33,-18,34,-18,35,-18,36,-18,37,-18,38,-18,39,-18,40,-18,41,-18,42,-18,43,-18,44,-18,52,-18,-1,0},
    /*57*/{30,-17,31,-17,32,-17,33,-17,34,-17,35,-17,36,-17,37,-17,38,-17,39,-17,40,-17,41,-17,42,-17,43,-17,44,-17,52,-17,-1,0},
    /*58*/{49,60,-1,0},
    /*59*/{10,-10,-1,0},
    /*60*/{52,13,-1,0},
    /*61*/{49,63,-1,0},
    /*62*/{10,-11,-1,0},
    /*63*/{49,65,-1,0},
    /*64*/{3,-8,15,-8,-1,0},
    /*65*/{49,67,-1,0},
    /*66*/{3,-6,11,-6,15,-6,-1,0},
    /*67*/{0,-2,-1,0},
    /*68*/{0,-57,8,90,-1,0},
    /*69*/{0,-48,5,-48,8,-48,-1,0},
    /*70*/{30,-13,31,-13,32,-13,33,-13,34,-13,35,-13,36,-13,37,-13,38,-13,39,-13,40,-13,41,-13,42,-13,43,-13,44,-13,52,-13,-1,0},
    /*71*/{0,-45,5,71,8,-45,-1,0},
    /*72*/{0,-47,5,-47,8,-47,-1,0},
    /*73*/{52,75,-1,0},
    /*74*/{52,76,-1,0},
    /*75*/{26,79,48,77,49,-52,-1,0},
    /*76*/{51,84,54,86,55,87,-1,0},
    /*77*/{49,83,-1,0},
    /*78*/{51,80,-1,0},
    /*79*/{48,77,49,-52,-1,0},
    /*80*/{49,82,-1,0},
    /*81*/{0,-49,5,-49,8,-49,-1,0},
    /*82*/{0,-50,5,-50,8,-50,-1,0},
    /*83*/{49,-55,-1,0},
    /*84*/{49,-51,-1,0},
    /*85*/{49,-53,-1,0},
    /*86*/{49,-54,-1,0},
    /*87*/{0,-1,-1,0},
    /*88*/{0,-59,8,-59,-1,0},
    /*89*/{30,-13,31,-13,32,-13,33,-13,34,-13,35,-13,36,-13,37,-13,38,-13,39,-13,40,-13,41,-13,42,-13,43,-13,44,-13,52,-13,-1,0},
    /*90*/{1,-66,2,-66,4,96,6,-66,7,-66,9,-66,12,-66,13,-66,19,-66,20,-66,45,-66,46,-66,49,-66,52,-66,53,-66,54,-66,-1,0},
    /*91*/{0,-56,8,90,-1,0},
    /*92*/{0,-58,8,-58,-1,0},
    /*93*/{1,117,2,109,6,105,7,118,9,119,12,123,13,104,19,106,20,114,45,115,46,113,49,-73,52,103,53,112,54,107,-1,0},
    /*94*/{1,-66,2,-66,4,96,6,-66,7,-66,9,-66,12,-66,13,-66,19,-66,20,-66,45,-66,46,-66,49,-66,52,-66,53,-66,54,-66,-1,0},
    /*95*/{25,99,-1,0},
    /*96*/{1,-65,2,-65,4,-65,6,-65,7,-65,9,-65,12,-65,13,-65,19,-65,20,-65,45,-65,46,-65,49,-65,52,-65,53,-65,54,-65,-1,0},
    /*97*/{0,-61,8,-61,-1,0},
    /*98*/{49,100,-1,0},
    /*99*/{0,-63,8,-63,-1,0},
    /*100*/{1,-64,2,-64,4,-64,6,-64,7,-64,9,-64,12,-64,13,-64,19,-64,20,-64,45,-64,46,-64,49,-64,52,-64,53,-64,54,-64,-1,0},
    /*101*/{0,-60,8,-60,-1,0},
    /*102*/{50,239,-1,0},
    /*103*/{54,228,-1,0},
    /*104*/{27,221,29,223,52,222,-1,0},
    /*105*/{51,218,-1,0},
    /*106*/{50,216,-1,0},
    /*107*/{49,-71,-1,0},
    /*108*/{52,13,-1,0},
    /*109*/{49,-69,-1,0},
    /*110*/{49,202,-1,0},
    /*111*/{49,-112,51,195,52,196,54,197,55,198,56,194,-1,0},
    /*112*/{54,178,-1,0},
    /*113*/{49,175,-1,0},
    /*114*/{49,158,-1,0},
    /*115*/{28,135,-1,0},
    /*116*/{49,-70,-1,0},
    /*117*/{54,133,-1,0},
    /*118*/{52,127,-1,0},
    /*119*/{49,-110,-1,0},
    /*120*/{49,-68,-1,0},
    /*121*/{49,-111,-1,0},
    /*122*/{52,13,-1,0},
    /*123*/{49,-102,-1,0},
    /*124*/{49,-91,-1,0},
    /*125*/{49,-93,-1,0},
    /*126*/{51,128,52,129,54,130,55,131,-1,0},
    /*127*/{49,-108,-1,0},
    /*128*/{49,-106,-1,0},
    /*129*/{49,-105,-1,0},
    /*130*/{49,-107,-1,0},
    /*131*/{49,-90,-1,0},
    /*132*/{49,-101,-1,0},
    /*133*/{4,155,-1,0},
    /*134*/{54,153,-1,0},
    /*135*/{4,-78,27,-78,29,-78,-1,0},
    /*136*/{4,-75,27,138,29,140,-1,0},
    /*137*/{52,147,-1,0},
    /*138*/{4,-77,27,-77,29,-77,-1,0},
    /*139*/{52,141,-1,0},
    /*140*/{49,142,52,143,54,144,-1,0},
    /*141*/{4,-79,27,-79,29,-79,-1,0},
    /*142*/{49,146,-1,0},
    /*143*/{49,145,-1,0},
    /*144*/{4,-81,27,-81,29,-81,-1,0},
    /*145*/{4,-80,27,-80,29,-80,-1,0},
    /*146*/{49,148,52,149,54,150,-1,0},
    /*147*/{4,-82,27,-82,29,-82,-1,0},
    /*148*/{49,152,-1,0},
    /*149*/{49,151,-1,0},
    /*150*/{4,-84,27,-84,29,-84,-1,0},
    /*151*/{4,-83,27,-83,29,-83,-1,0},
    /*152*/{49,154,-1,0},
    /*153*/{4,-76,27,-76,29,-76,-1,0},
    /*154*/{27,157,-1,0},
    /*155*/{49,-72,-1,0},
    /*156*/{49,-85,-1,0},
    /*157*/{54,-124,-1,0},
    /*158*/{54,163,-1,0},
    /*159*/{49,-121,-1,0},
    /*160*/{47,-126,54,-126,-1,0},
    /*161*/{47,170,54,163,-1,0},
    /*162*/{50,164,-1,0},
    /*163*/{52,165,54,166,-1,0},
    /*164*/{49,168,-1,0},
    /*165*/{49,167,-1,0},
    /*166*/{47,-128,54,-128,-1,0},
    /*167*/{47,-127,54,-127,-1,0},
    /*168*/{49,-123,-1,0},
    /*169*/{50,172,-1,0},
    /*170*/{47,-125,54,-125,-1,0},
    /*171*/{52,173,54,174,-1,0},
    /*172*/{49,-129,-1,0},
    /*173*/{49,-130,-1,0},
    /*174*/{28,-74,-1,0},
    /*175*/{52,182,54,185,-1,0},
    /*176*/{49,-122,-1,0},
    /*177*/{49,179,54,180,-1,0},
    /*178*/{52,-132,54,-132,-1,0},
    /*179*/{49,181,-1,0},
    /*180*/{52,-133,54,-133,-1,0},
    /*181*/{49,193,-1,0},
    /*182*/{47,187,52,182,54,185,-1,0},
    /*183*/{47,-135,52,-135,54,-135,-1,0},
    /*184*/{49,186,-1,0},
    /*185*/{47,-137,52,-137,54,-137,-1,0},
    /*186*/{50,190,-1,0},
    /*187*/{47,-134,52,-134,54,-134,-1,0},
    /*188*/{49,-131,-1,0},
    /*189*/{52,191,54,192,-1,0},
    /*190*/{49,-138,-1,0},
    /*191*/{49,-139,-1,0},
    /*192*/{47,-136,52,-136,54,-136,-1,0},
    /*193*/{49,-120,-1,0},
    /*194*/{49,-119,-1,0},
    /*195*/{49,-116,52,200,54,201,-1,0},
    /*196*/{49,-114,54,199,-1,0},
    /*197*/{49,-115,-1,0},
    /*198*/{49,-113,-1,0},
    /*199*/{49,-118,-1,0},
    /*200*/{49,-117,-1,0},
    /*201*/{1,-67,2,-67,4,-67,6,-67,7,-67,9,-67,12,-67,13,-67,19,-67,20,-67,45,-67,46,-67,49,-67,52,-67,53,-67,54,-67,-1,0},
    /*202*/{49,-92,-1,0},
    /*203*/{24,205,-1,0},
    /*204*/{52,206,54,207,-1,0},
    /*205*/{21,212,-1,0},
    /*206*/{21,208,-1,0},
    /*207*/{54,209,-1,0},
    /*208*/{22,210,-1,0},
    /*209*/{54,211,-1,0},
    /*210*/{49,-104,-1,0},
    /*211*/{52,213,-1,0},
    /*212*/{22,214,-1,0},
    /*213*/{52,215,-1,0},
    /*214*/{49,-103,-1,0},
    /*215*/{45,115,46,113,53,112,-1,0},
    /*216*/{49,-87,-1,0},
    /*217*/{49,-109,-1,0},
    /*218*/{49,-94,-1,0},
    /*219*/{49,-89,-1,0},
    /*220*/{54,226,-1,0},
    /*221*/{54,225,-1,0},
    /*222*/{54,224,-1,0},
    /*223*/{49,-98,-1,0},
    /*224*/{49,-100,-1,0},
    /*225*/{49,-99,-1,0},
    /*226*/{49,-88,-1,0},
    /*227*/{23,229,-1,0},
    /*228*/{52,230,-1,0},
    /*229*/{52,231,-1,0},
    /*230*/{24,232,49,-96,-1,0},
    /*231*/{52,233,54,234,-1,0},
    /*232*/{21,237,-1,0},
    /*233*/{21,235,-1,0},
    /*234*/{54,236,-1,0},
    /*235*/{49,-97,-1,0},
    /*236*/{52,238,-1,0},
    /*237*/{49,-95,-1,0},
    /*238*/{49,-86,-1,0},
    /*239*/{52,241,-1,0},
    /*240*/{49,242,-1,0},
    /*241*/{1,-62,2,-62,4,-62,6,-62,7,-62,9,-62,12,-62,13,-62,19,-62,20,-62,45,-62,46,-62,49,-62,52,-62,53,-62,54,-62,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{20,2,46,4,51,1,-1,-1},
    /*1*/{13,71,14,69,15,68,-1,-1},
    /*2*/{-1,-1},
    /*3*/{-1,-1},
    /*4*/{33,6,-1,-1},
    /*5*/{-1,-1},
    /*6*/{8,9,-1,-1},
    /*7*/{59,60,60,38,-1,-1},
    /*8*/{59,37,60,38,-1,-1},
    /*9*/{37,10,-1,-1},
    /*10*/{17,17,18,18,19,15,-1,-1},
    /*11*/{1,13,-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{1,35,-1,-1},
    /*17*/{49,20,-1,-1},
    /*18*/{19,19,-1,-1},
    /*19*/{-1,-1},
    /*20*/{47,25,-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{48,27,-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{1,58,-1,-1},
    /*38*/{4,56,5,39,6,55,-1,-1},
    /*39*/{4,57,-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{1,61,-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{10,90,28,91,29,88,30,87,-1,-1},
    /*69*/{-1,-1},
    /*70*/{59,73,60,38,-1,-1},
    /*71*/{14,72,-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{2,77,-1,-1},
    /*76*/{3,84,-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{2,80,-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{59,239,60,38,-1,-1},
    /*90*/{12,97,34,96,35,94,61,93,-1,-1},
    /*91*/{10,90,29,92,-1,-1},
    /*92*/{-1,-1},
    /*93*/{9,121,11,109,16,120,21,107,32,119,36,110,52,115,-1,-1},
    /*94*/{12,101,34,100,61,93,-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
    /*103*/{45,226,-1,-1},
    /*104*/{22,219,-1,-1},
    /*105*/{50,218,-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{1,203,7,202,-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{38,176,39,175,-1,-1},
    /*113*/{-1,-1},
    /*114*/{23,159,24,158,-1,-1},
    /*115*/{53,133,55,135,-1,-1},
    /*116*/{-1,-1},
    /*117*/{40,131,-1,-1},
    /*118*/{31,125,-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{1,123,44,124,-1,-1},
    /*123*/{-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{-1,-1},
    /*133*/{54,155,-1,-1},
    /*134*/{-1,-1},
    /*135*/{56,136,-1,-1},
    /*136*/{57,138,-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
    /*140*/{-1,-1},
    /*141*/{-1,-1},
    /*142*/{-1,-1},
    /*143*/{-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{26,160,27,161,-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{25,168,26,170,-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{-1,-1},
    /*166*/{-1,-1},
    /*167*/{-1,-1},
    /*168*/{-1,-1},
    /*169*/{-1,-1},
    /*170*/{-1,-1},
    /*171*/{-1,-1},
    /*172*/{-1,-1},
    /*173*/{-1,-1},
    /*174*/{-1,-1},
    /*175*/{42,183,43,182,-1,-1},
    /*176*/{-1,-1},
    /*177*/{-1,-1},
    /*178*/{-1,-1},
    /*179*/{-1,-1},
    /*180*/{-1,-1},
    /*181*/{-1,-1},
    /*182*/{41,188,42,187,-1,-1},
    /*183*/{-1,-1},
    /*184*/{-1,-1},
    /*185*/{-1,-1},
    /*186*/{-1,-1},
    /*187*/{-1,-1},
    /*188*/{-1,-1},
    /*189*/{-1,-1},
    /*190*/{-1,-1},
    /*191*/{-1,-1},
    /*192*/{-1,-1},
    /*193*/{-1,-1},
    /*194*/{-1,-1},
    /*195*/{-1,-1},
    /*196*/{-1,-1},
    /*197*/{-1,-1},
    /*198*/{-1,-1},
    /*199*/{-1,-1},
    /*200*/{-1,-1},
    /*201*/{-1,-1},
    /*202*/{-1,-1},
    /*203*/{-1,-1},
    /*204*/{-1,-1},
    /*205*/{-1,-1},
    /*206*/{-1,-1},
    /*207*/{-1,-1},
    /*208*/{-1,-1},
    /*209*/{-1,-1},
    /*210*/{-1,-1},
    /*211*/{-1,-1},
    /*212*/{-1,-1},
    /*213*/{-1,-1},
    /*214*/{-1,-1},
    /*215*/{9,121,16,216,32,119,-1,-1},
    /*216*/{-1,-1},
    /*217*/{-1,-1},
    /*218*/{-1,-1},
    /*219*/{-1,-1},
    /*220*/{-1,-1},
    /*221*/{-1,-1},
    /*222*/{-1,-1},
    /*223*/{-1,-1},
    /*224*/{-1,-1},
    /*225*/{-1,-1},
    /*226*/{-1,-1},
    /*227*/{-1,-1},
    /*228*/{-1,-1},
    /*229*/{-1,-1},
    /*230*/{-1,-1},
    /*231*/{-1,-1},
    /*232*/{-1,-1},
    /*233*/{-1,-1},
    /*234*/{-1,-1},
    /*235*/{-1,-1},
    /*236*/{-1,-1},
    /*237*/{-1,-1},
    /*238*/{-1,-1},
    /*239*/{-1,-1},
    /*240*/{-1,-1},
    /*241*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 1;}

  /** EOF symbol index */
  public int EOF_sym() {return 0;}

  /** error symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {

	action_obj.scanner = scanner;
	action_obj.classFile = classFile;

    }

  /** scan to get the next token */
  public java_cup.runtime.token scan()
    throws java.lang.Exception
    {

    return scanner.next_token();

    }



	// parser code

	public Scanner scanner;
	public ClassFile classFile;
	
	public void report_error(String message, Object info) {
    	    classFile.report_error("Warning - " + message);
	}

	public void report_fatal_error(String message, Object info)  {
    	    classFile.report_error("Error - " + message);
    	    // System.exit(-1);
	}

	parser(ClassFile classFile, Scanner scanner) {
		super();

	    this.scanner = scanner;
	    this.classFile = classFile;
	}

};

/** JavaCup generated class to encapsulate user supplied action code.*/
class CUP$actions {


    short access_val;
	public ClassFile classFile;
    public Scanner scanner;


  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* object for return from actions */
      java_cup.runtime.symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // table_default ::= DEFAULT COLON Int 
            {
              CUP$result = new symbol(/*table_default*/41);
              
            classFile.endTableswitch((/*off*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // table_default ::= DEFAULT COLON Word 
            {
              CUP$result = new symbol(/*table_default*/41);
              
            classFile.endTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // table_entry ::= Int SEP 
            {
              CUP$result = new symbol(/*table_entry*/42);
              
            classFile.addTableswitch((/*off*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // table_entry ::= Word SEP 
            {
              CUP$result = new symbol(/*table_entry*/42);
              
            classFile.addTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // table_list ::= table_entry 
            {
              CUP$result = new symbol(/*table_list*/43);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // table_list ::= table_list table_entry 
            {
              CUP$result = new symbol(/*table_list*/43);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // table_args ::= Int Int SEP 
            {
              CUP$result = new symbol(/*table_args*/39);
              
            classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*high*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // table_args ::= Int SEP 
            {
              CUP$result = new symbol(/*table_args*/39);
              
            classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // table ::= table_args table_list table_default 
            {
              CUP$result = new symbol(/*table*/38);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lookup_default ::= DEFAULT COLON Int 
            {
              CUP$result = new symbol(/*lookup_default*/25);
               classFile.endLookupswitch((/*off*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lookup_default ::= DEFAULT COLON Word 
            {
              CUP$result = new symbol(/*lookup_default*/25);
               classFile.endLookupswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // lookup_entry ::= Int COLON Int SEP 
            {
              CUP$result = new symbol(/*lookup_entry*/26);
              
            classFile.addLookupswitch((/*i*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val, (/*off*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lookup_entry ::= Int COLON Word SEP 
            {
              CUP$result = new symbol(/*lookup_entry*/26);
              
            classFile.addLookupswitch((/*i*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val, (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lookup_list ::= lookup_entry 
            {
              CUP$result = new symbol(/*lookup_list*/27);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lookup_list ::= lookup_list lookup_entry 
            {
              CUP$result = new symbol(/*lookup_list*/27);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lookup_args ::= SEP 
            {
              CUP$result = new symbol(/*lookup_args*/24);
               classFile.newLookupswitch(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lookup ::= lookup_args lookup_list lookup_default 
            {
              CUP$result = new symbol(/*lookup*/23);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // complex_instruction ::= TABLESWITCH table 
            {
              CUP$result = new symbol(/*complex_instruction*/9);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // complex_instruction ::= LOOKUPSWITCH lookup 
            {
              CUP$result = new symbol(/*complex_instruction*/9);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // simple_instruction ::= Insn Signed 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plantRelativeGoto((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(signed_num_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // simple_instruction ::= Insn Str 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plantString((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // simple_instruction ::= Insn Word Word 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // simple_instruction ::= Insn Word Int 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // simple_instruction ::= Insn Word 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // simple_instruction ::= Insn Num 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // simple_instruction ::= Insn Int 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // simple_instruction ::= Insn Int Int 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // simple_instruction ::= Insn 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // instruction ::= complex_instruction 
            {
              CUP$result = new symbol(/*instruction*/16);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // instruction ::= simple_instruction 
            {
              CUP$result = new symbol(/*instruction*/16);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // signature_expr ::= Str 
            {
              CUP$result = new symbol(/*signature_expr*/50);
              
            classFile.setMethodSignature((/*sig*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // set_expr ::= Word Str 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(str_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // set_expr ::= Word Num 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(num_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // set_expr ::= Word Word 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(str_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // set_expr ::= Word Int 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(int_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // catch_expr ::= classname FROM Int TO Int USING Int 
            {
              CUP$result = new symbol(/*catch_expr*/7);
              
            classFile.addCatch((/*aclass*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                               (/*fromoff*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val,
                               (/*tooff*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val,
                               (/*branchoff*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // catch_expr ::= classname FROM Word TO Word USING Word 
            {
              CUP$result = new symbol(/*catch_expr*/7);
              
            classFile.addCatch((/*aclass*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                               (/*fromlab*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val,
                               (/*tolab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                               (/*branchlab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // throws_expr ::= classname 
            {
              CUP$result = new symbol(/*throws_expr*/44);
              
            classFile.addThrow((/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // line_expr ::= Int 
            {
              CUP$result = new symbol(/*line_expr*/40);
               classFile.addLine((/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // limit_expr ::= Word Int 
            {
              CUP$result = new symbol(/*limit_expr*/22);
              
         classFile.report_error(".limit expected \"stack\" or \"locals\", but got "
                      + (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
      
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // limit_expr ::= STACK Int 
            {
              CUP$result = new symbol(/*limit_expr*/22);
              
         classFile.setStackSize((short)(/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
      
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // limit_expr ::= LOCALS Int 
            {
              CUP$result = new symbol(/*limit_expr*/22);
              
        classFile.setVarSize((short)(/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
      
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // var_expr ::= Int IS Word Word FROM Int TO Int 
            {
              CUP$result = new symbol(/*var_expr*/45);
              
             classFile.addVar((/*soff*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*eoff*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val,
                            (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-7)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // var_expr ::= Int IS Word Word 
            {
              CUP$result = new symbol(/*var_expr*/45);
              
             classFile.addVar(null, null, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // var_expr ::= Int IS Word Word FROM Word TO Word 
            {
              CUP$result = new symbol(/*var_expr*/45);
              
             classFile.addVar((/*slab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*elab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val,
                            (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-7)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // directive ::= DSIGNATURE signature_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // directive ::= DSET set_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // directive ::= DCATCH catch_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // directive ::= DTHROWS throws_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // directive ::= DLINE line_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // directive ::= DLIMIT limit_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // directive ::= DVAR var_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // label ::= Int COLON instruction 
            {
              CUP$result = new symbol(/*label*/21);
              
            classFile.plantLabel(String.valueOf((/*label*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // label ::= Word COLON 
            {
              CUP$result = new symbol(/*label*/21);
              
            classFile.plantLabel((/*label*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // endstack ::= DEND STACK 
            {
              CUP$result = new symbol(/*endstack*/54);
               classFile.endStack(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stack_item ::= STACK Word Int SEP 
            {
              CUP$result = new symbol(/*stack_item*/57);
               classFile.plantStackStack((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, String.valueOf((/*n*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stack_item ::= STACK Word Word SEP 
            {
              CUP$result = new symbol(/*stack_item*/57);
               classFile.plantStackStack((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*val*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stack_item ::= STACK Word SEP 
            {
              CUP$result = new symbol(/*stack_item*/57);
               classFile.plantStackStack((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, null); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stack_item ::= LOCALS Word Int SEP 
            {
              CUP$result = new symbol(/*stack_item*/57);
               classFile.plantStackLocals((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, String.valueOf((/*n*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val)); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stack_item ::= LOCALS Word Word SEP 
            {
              CUP$result = new symbol(/*stack_item*/57);
               classFile.plantStackLocals((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*val*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stack_item ::= LOCALS Word SEP 
            {
              CUP$result = new symbol(/*stack_item*/57);
               classFile.plantStackLocals((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, null); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stack_items ::= 
            {
              CUP$result = new symbol(/*stack_items*/56);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stack_items ::= stack_items stack_item 
            {
              CUP$result = new symbol(/*stack_items*/56);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stack_offset_def ::= OFFSET Int SEP 
            {
              CUP$result = new symbol(/*stack_offset_def*/55);
               classFile.plantStackOffset((/*n*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stack_map_frame_desc ::= stack_offset_def stack_items 
            {
              CUP$result = new symbol(/*stack_map_frame_desc*/53);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // defstack ::= DSTACK SEP 
            {
              CUP$result = new symbol(/*defstack*/52);
               classFile.beginStack(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmnt ::= 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmnt ::= defstack stack_map_frame_desc endstack 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmnt ::= label 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmnt ::= error 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmnt ::= directive 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmnt ::= instruction 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= NT$1 stmnt SEP 
            {
              CUP$result = new symbol(/*statement*/34);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$1 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$1*/61);
               classFile.setLine(scanner.token_line_num); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statements ::= statement 
            {
              CUP$result = new symbol(/*statements*/35);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statements ::= statements statement 
            {
              CUP$result = new symbol(/*statements*/35);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // endmethod ::= DEND METHOD SEP 
            {
              CUP$result = new symbol(/*endmethod*/12);
              
            classFile.endMethod();
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // defmethod ::= DMETHOD access Word SEP 
            {
              CUP$result = new symbol(/*defmethod*/10);
              
            String split[] = ScannerUtils.splitMethodSignature((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            classFile.newMethod(split[0], split[1], (/*i*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // method_spec ::= defmethod endmethod 
            {
              CUP$result = new symbol(/*method_spec*/29);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // method_spec ::= defmethod statements endmethod 
            {
              CUP$result = new symbol(/*method_spec*/29);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // method_list ::= method_spec 
            {
              CUP$result = new symbol(/*method_list*/28);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // method_list ::= method_list method_spec 
            {
              CUP$result = new symbol(/*method_list*/28);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // methods ::= 
            {
              CUP$result = new symbol(/*methods*/30);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // methods ::= method_list 
            {
              CUP$result = new symbol(/*methods*/30);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // item ::= Str 
            {
              CUP$result = new var_token(/*item*/3);
               ((var_token)CUP$result).var_val = (/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // item ::= Num 
            {
              CUP$result = new var_token(/*item*/3);
               ((var_token)CUP$result).var_val = (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // item ::= Int 
            {
              CUP$result = new var_token(/*item*/3);
               ((var_token)CUP$result).var_val = new Integer((/*i*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // optional_default ::= 
            {
              CUP$result = new var_token(/*optional_default*/2);
               ((var_token)CUP$result).var_val = null; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // optional_default ::= EQ item 
            {
              CUP$result = new var_token(/*optional_default*/2);
               ((var_token)CUP$result).var_val = (/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // field_spec ::= DFIELD access Word Word optional_default SEP 
            {
              CUP$result = new symbol(/*field_spec*/14);
              
            classFile.addField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                               null, (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // field_spec ::= DFIELD access Word Word SIGNATURE Str optional_default SEP 
            {
              CUP$result = new symbol(/*field_spec*/14);
              
            classFile.addField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-6)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val, (/*desc*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val,
                               (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // field_list ::= field_spec 
            {
              CUP$result = new symbol(/*field_list*/13);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // field_list ::= field_list field_spec 
            {
              CUP$result = new symbol(/*field_list*/13);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fields ::= 
            {
              CUP$result = new symbol(/*fields*/15);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fields ::= field_list 
            {
              CUP$result = new symbol(/*fields*/15);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // enclosing_spec ::= 
            {
              CUP$result = new symbol(/*enclosing_spec*/48);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // enclosing_spec ::= DENCLOSING METHOD Str SEP 
            {
              CUP$result = new symbol(/*enclosing_spec*/48);
              
            classFile.setEnclosingMethod((/*s*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // enclosing_spec ::= DENCLOSING METHOD Word SEP 
            {
              CUP$result = new symbol(/*enclosing_spec*/48);
              
            classFile.setEnclosingMethod((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // debug_extension ::= 
            {
              CUP$result = new symbol(/*debug_extension*/47);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // debug_extension ::= DDEBUG Str SEP 
            {
              CUP$result = new symbol(/*debug_extension*/47);
              
            classFile.setSourceDebugExtension((/*s*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // implements_spec ::= DIMPLEMENTS classname SEP 
            {
              CUP$result = new symbol(/*implements_spec*/19);
               classFile.addInterface((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // implements_list ::= implements_spec 
            {
              CUP$result = new symbol(/*implements_list*/18);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // implements_list ::= implements_list implements_spec 
            {
              CUP$result = new symbol(/*implements_list*/18);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // implements ::= 
            {
              CUP$result = new symbol(/*implements*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // implements ::= implements_list 
            {
              CUP$result = new symbol(/*implements*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // super_spec ::= DSUPER classname SEP 
            {
              CUP$result = new symbol(/*super_spec*/37);
              
            classFile.setSuperClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // access_item ::= VARARGS 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_VARARGS; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // access_item ::= BRIDGE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_BRIDGE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // access_item ::= ENUM 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_ENUM; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // access_item ::= ANNOTATION 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_ANNOTATION; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // access_item ::= ABSTRACT 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_ABSTRACT; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // access_item ::= INTERFACE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_INTERFACE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // access_item ::= NATIVE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_NATIVE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // access_item ::= TRANSIENT 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_TRANSIENT; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // access_item ::= VOLATILE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_VOLATILE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // access_item ::= SYNCHRONIZED 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_SYNCHRONIZED; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // access_item ::= FINAL 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_FINAL; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // access_item ::= STATIC 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_STATIC; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // access_item ::= PROTECTED 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_PROTECTED; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // access_item ::= PRIVATE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_PRIVATE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // access_item ::= PUBLIC 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_PUBLIC; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // access_items ::= access_item 
            {
              CUP$result = new symbol(/*access_items*/5);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // access_items ::= access_items access_item 
            {
              CUP$result = new symbol(/*access_items*/5);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // access_list ::= 
            {
              CUP$result = new symbol(/*access_list*/6);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // access_list ::= access_items 
            {
              CUP$result = new symbol(/*access_list*/6);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // access ::= NT$0 access_list 
            {
              CUP$result = new int_token(/*access*/59);
               ((int_token)CUP$result).int_val = access_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$0*/60);
               access_val = 0; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classname ::= Word 
            {
              CUP$result = new str_token(/*classname*/1);
               ((str_token)CUP$result).str_val = ScannerUtils.convertDots((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // class_spec ::= DINTERFACE access classname SEP 
            {
              CUP$result = new symbol(/*class_spec*/8);
              
            classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val |
                        RuntimeConstants.ACC_SUPER |
                        RuntimeConstants.ACC_INTERFACE));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class_spec ::= DCLASS access classname SEP 
            {
              CUP$result = new symbol(/*class_spec*/8);
              
            classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val | RuntimeConstants.ACC_SUPER));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // source_spec ::= 
            {
              CUP$result = new symbol(/*source_spec*/33);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // source_spec ::= DSOURCE Word SEP 
            {
              CUP$result = new symbol(/*source_spec*/33);
               classFile.setSource((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bytecode_spec ::= 
            {
              CUP$result = new symbol(/*bytecode_spec*/46);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bytecode_spec ::= DBYTECODE Num SEP 
            {
              CUP$result = new symbol(/*bytecode_spec*/46);
               classFile.setVersion((/*n*/(num_token)CUP$stack.elementAt(CUP$top-1)).num_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // signature_spec ::= 
            {
              CUP$result = new symbol(/*signature_spec*/49);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // signature_spec ::= DSIGNATURE Str SEP 
            {
              CUP$result = new symbol(/*signature_spec*/49);
               classFile.setSignature((/*sig*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // jasmin_header ::= bytecode_spec source_spec class_spec super_spec implements signature_spec debug_extension enclosing_spec 
            {
              CUP$result = new symbol(/*jasmin_header*/51);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= jas_file EOF 
            {
              CUP$result = new java_cup.runtime.token(/*$START*/0);
              
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // jas_file ::= jasmin_header fields methods 
            {
              CUP$result = new symbol(/*jas_file*/20);
              
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
};

